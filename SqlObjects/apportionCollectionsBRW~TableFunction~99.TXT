create function dbo.apportionCollectionsBRW( @accountId int ) returns @rt table(
 accountId int,
 accountCode varchar(50),
 accountDesc varchar(50),
 amount money
)
begin

 declare
  @tokenId int,
  @tokenAccountId int,
  @tokenAmount money,
  @tokenYear varchar(50),
  @tokenCode varchar(50)

 declare @wt table(
  id int identity(1,1),
  accountId int,
  creditCode varchar(50),
  apTableType varchar(50),
  apYear varchar(50),
  debitCode varchar(50),
  stepDesc varchar(50),
  amount money,
  processFlag int default 0
 )

-- debit Collection Account
 insert @wt (accountId, debitCode, apTableType, amount)
 select a.contraId, b.accountCode, b.apTableType, SUM(a.amount)
  from gldetail a, glAccounts b
  where a.contraId = b.accountId
   and a.contraId = @accountId
   and ISNULL(a.bsId,0) = 0
  group by a.contraId, b.accountCode, b.apTableType

-- credit Expense accounts
 insert @wt (accountId, creditCode,apTableType,amount)
 select b.accountId, b.accountCode, b.apTableType, SUM(a.amount)
  from gldetail a, glAccounts b
  where b.accountType = 'EXPENSE'
   and a.contraId = @accountId
   and ISNULL(a.bsId,0) = 0
  group by b.accountId, b.accountCode, b.apTableType

 
 insert @wt(accountId, creditCode, apTableType, apYear, debitCode, amount)
 select a.accountId, b.accountCode, b.apTableType, b.apYear, b.fundCode, SUM(a.amount)
  from gldetail a, glAccounts b
  where a.accountId = b.accountId
   and a.contraId = @accountId
   and ISNULL(a.bsId,0) = 0
  group by a.accountId, b.accountCode, b.apTableType, b.apYear, b.fundCode

-- process the M types
 update @wt set processFlag = 1 where apTableType = 'M'

 while exists(select * from @wt where processFlag = 1)
 begin
  select top 1 @tokenId = id, @tokenAccountId = accountId, @tokenAmount = amount from @wt where processFlag = 1
  insert @wt (accountId, apTableType, apYear, debitCode, amount, stepDesc)
  select @tokenAccountId, apTableType, taxYear, apportionCode, amount, sourceCode
   from dbo.getRates('apportionment',@tokenAccountId,@tokenAmount,null,null)
  update @wt set processFlag = 2 where id = @tokenId
 end

-- setup processing again if there are table accounts returned from the M routine
 update @wt set processFlag = 1 where processFlag = 0 and apTableType = 'A' -- in ('L','M','S','P','A')

 while exists(select * from @wt where processFlag = 1)
 begin
  select top 1 @tokenId = id, @tokenAccountId = accountId, @tokenAmount = amount, @tokenYear = apYear, @tokenCode = debitCode from @wt where processFlag = 1
  insert @wt(accountId, apYear, debitCode, amount, stepDesc)
  select @tokenAccountId, @tokenYear, @tokenCode, amount, description+'_'+@tokenYear
   from dbo.millsGetRows(4013,@tokenYear,@tokenAmount)
  update @wt set processFlag = 2, debitCode = null where id = @tokenId
 end

-- debits
 insert @rt
 select b.accountId, b.accountCode, b.accountDesc, a.amount from @wt a, glAccounts b where a.debitCode > '  0' and a.debitCode = b.accountCode
 
-- credits
 insert @rt
 select b.accountId, b.accountCode, b.accountDesc, a.amount * -1 from @wt a, glAccounts b where a.creditCode > '  0' and a.creditCode = b.accountCode

 return
end
