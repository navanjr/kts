create procedure dbo.pipedStringToJson(
 @object stringBlob readonly,
 @fields blobFields readonly,
 @includeSiteId varchar(5) = 'TRUE',
 @includeBlanks varchar(5) = 'FALSE', 
 @urlEncode varchar(5) = 'FALSE',
 @includeAPIPrefix varchar(5) = 'TRUE',
 @payload nvarchar(max) = null output
) as
begin

 declare
  @objectRows int,
  @jsonPrep jsonPrep,
  @apiwt JSONHierarchy,
  @tokenId int,
  @tally int = 0,
  @jsonString nvarchar(max),
  @siteCode varchar(50),
  @goofyChars varchar(100) = '13,10,9,167,248,34,39',
  @blob varchar(max),
  @arrayId int

 select @siteCode = apiSiteCode from dbo.site
 select @objectRows = count(*) from @object

 declare ids cursor for select id from @object

 open ids
 fetch next from ids into @tokenId
 exec dbo.logit @@procid, 'Started... @siteCode', @siteCode, '@objectRows', @objectRows, '@@fetch_status', @@FETCH_STATUS

 if not @@FETCH_STATUS = 0
  return

 while @@FETCH_STATUS = 0
 begin
  set @tally = @tally + 1
 
  select @blob = blob from @object where ID = @tokenId

  insert @jsonPrep (parentId,name,value,type,origin)
  select
   case when f.blobIt = 1 then @tokenId else @tally end, 
   f.fieldName,
   case when f.fieldType = 'clarionDate' then dbo.date1(s.data) else s.data end,
   case when f.fieldType = 'clarionDate' then 'string' else f.fieldType end,
   1
  from dbo.split(@blob,'|') s
   join @fields f on f.id = s.id 
  where case when @includeBlanks = 'FALSE' then s.data else '1' end > '  0'

  if @includeSiteId = 'TRUE'
   insert @jsonPrep (parentId,name,value,type,origin)
   select 
    @tally, 
    'site_id',
    @siteCode,
    'int',
    1


-- add the blob object contanier if we need it
  if exists(select * from @fields where blobIt = 1)
   insert @jsonPrep (parentId,objectId,name,value,type, origin) 
   select @tally, @tokenId, 'blob', @tokenId, 'object', 2

-- add the objectId
--  union select @tally, null, 'objectId', cast(@tokenId as varchar), 'int', 3

-- add the object row contanier
  insert @jsonPrep (parentId,objectId,name,value,type, origin) 
   select -1, @tally, null, @tally, 'object', 4

  fetch next from ids into @tokenId
 end
 close ids
 deallocate ids

-- remove the blob container if we dont need it
-- if not exists(select * from @fields where blobIt = 1)
--  delete @jsonPrep where origin = 2 and name = 'blob'

 update @jsonPrep set value = dbo.stripChars(value,@goofyChars) where type = 'string'

 select @arrayId = max(objectId) + 1 from @jsonPrep
 update @jsonPrep set parentId = @arrayId where type = 'object' and parentId = -1
 insert @jsonPrep (objectId, name, type) 
 select @arrayId, '-', 'array'

 insert @apiwt select id, parentId, objectId, name, value, type from @jsonPrep

 if @includeAPIPrefix = 'TRUE'
  select @jsonString = 'site_id=' + @siteCode + '&rows='
 else 
  select @jsonString = ''

 if @urlEncode = 'TRUE'
  select @jsonString = @jsonString + dbo.URLEncode(dbo.toJSON(@apiwt))
 else
  select @jsonString = @jsonString + dbo.toJSON(@apiwt)

 set @payload = @jsonString

end