create procedure dbo.receiptStageGL (@receiptId int, @mode int = 0) as
begin
 set nocount on

 exec dbo.logit @@procid, '@receiptId', @receiptId

 declare @accountsWorking table(
  accountId int,
  contraId int,
  amount money,
  comment varchar(100),
  sourceCode varchar(60),
  slink2 varchar(15),
  altContraId int
 )
 declare @accounts table(
  accountId int,
  contraId int,
  amount money,
  comment varchar(100),
  sourceCode varchar(60),
  id int identity (1,1),
  slink2 varchar(15)
 )
 declare @contraAccounts table(
  accountId int,
  contraId int,
  amount money,
  comment varchar(100),
  sourceCode varchar(60),
  id int identity (1,1),
  slink2 varchar(15)
 )
 
 declare @styp char(1) = 'o'
 declare
  @slink varchar(15) = @styp + cast(@receiptId as varchar),
  @slink2 varchar(15),
  @code int,
  @contraId int,
  @arAccountId int,
  @tokenId int,
  @tokenAccountId int,
  @tokenContraId int,
  @tokenAmount money,
  @receiptType varchar(50),
  @comment varchar(50),
  @sourceCode varchar(60),
  @balanceToken money,
  @log varchar(max),
  @suspenseMethod varchar(50),
  @exempt varchar(10),
  @blob varchar(max),
  @message varchar(max),
  @tokenETRPaidAmount money

 select @suspenseMEthod = dbo.readstring('@suspenseMethod=',dbo.whoAmI())
 
 -- Pre Stage check 
 if exists(select * from glDetail with (NOLOCK) where slink = 'o' + cast(@receiptId as varchar))
 begin
  select @blob = '@code=1;@message=This record already has records in gldetail;'
  exec dbo.logit @@procId,@blob
  return
 end


 select 
  @code = code,
  @contraId = contraId ,
  @arAccountId = arAccountId,
  @receiptType = receiptType,
  @exempt = exempt
 from dbo.receiptCheck(@receiptId,null)


-- fork for trust or tax
 if @receiptType = 'TAX'
 begin
  exec dbo.receiptTaxStageGL @receiptId, @mode
  return
 end

 select @blob = '@code='+cast(@code as varchar(10))+';@contraId='+cast(@contraId as varchar(15))+';@arAccountId='+cast(@arAccountId as varchar(15))+';@receiptType='+@receiptType+';@exempt='+@exempt+';'  

 exec dbo.logit @@procId,@blob
-- credit Source and Debit AR
 if @receiptType<>'OFFICIAL' and @exempt<>'TRUE'
 begin
  insert @accountsWorking
   select b.accountId, null, sum(a.amount)*-1,'', '', '', case when a.altContraId > 0 then altContraId else @contraId end
   from receiptDetail a with (NOLOCK), dbo.glAccounts b where a.slink = @slink and a.sourceCode = b.accountCode group by b.accountId,a.altContraId
  select @tokenAmount = abs(sum(amount)) from @accountsWorking
  insert @accountsWorking select @arAccountId, null, @tokenAmount,'','','',0
 end

-- credit Source and Debit AR
 if @exempt = 'TRUE'
 begin
  insert @accountsWorking
   select b.accountId, null, sum(a.amount)*-1,'Source', '', '', 0
   from receiptDetail a with (NOLOCK), dbo.glAccounts b where a.slink = @slink 
    and a.sourceCode = b.accountCode 
    group by b.accountId

  insert @accountsWorking
   select b.accountId, null, sum(a.amount),'Credit', '', '', 0
   from receiptDetail a with (NOLOCK), dbo.glAccounts b where a.slink = @slink 
    and a.sourceCode = b.accountCode 
    group by b.accountId
 end


-- Here we go with the Paid Block
 if exists(select * from paid with (NOLOCK) where slink = @slink)
 begin
  declare @ap table(id int identity(1,1),
   accountId int,
   contraId int,
   amount money,
   prorate decimal(19,18),
   payAmount decimal(19,10),
   comment varchar(100),
   sourceCode varchar(60)
  )
  declare @paidTotal money, @etrPaid numeric(19,10), @otherPaid numeric(19,10), @etrPercent numeric(19,10), @otherPercent numeric(19,10), @etrCode varchar(60)

-- credit AR
  select @otherPaid = sum(amount)*-1 from paid with (NOLOCK) where slink = @slink and paycode not in (select key1 from object with (NOLOCK) where typ=4505 and a2 in ('E','C','B'))
  select @etrPaid = sum(amount)*-1 from paid with (NOLOCK) where slink = @slink and paycode in (select key1 from object with (NOLOCK) where typ=4505 and a2 in ('E','C','B'))
  select @paidTotal = isnull(@otherPaid,0)+isnull(@etrPaid,0)
  select top 1 @etrCode = paycode from paid with (NOLOCK) where slink = @slink and paycode in (select key1 from object with (NOLOCK) where typ=4505 and a2 in ('E','C','B'))

  select @etrPercent = case when isnull(@paidTotal,0) <> 0.00 then isnull(@etrPaid,0)/isnull(@paidTotal,0) else 0 end
  select @otherPercent = case when isnull(@paidTotal,0) <> 0.00 then isnull(@otherPaid,0)/isnull(@paidTotal,0) else 0 end


  if @receiptType<>'OFFICIAL'
  begin
   insert @accountsWorking select @arAccountId, null, @paidTotal,'','','',0
  end

-- debit suspense accounts
  if @suspenseMethod in ('S','U')
  begin
   insert @accountsWorking
   select b.accountId, null, sum(a.amount),'','','p'+cast(a.id as varchar(14)),0
   from paid a with (NOLOCK), dbo.posAccounts(dbo.posName(@receiptId)) b 
   where a.paycode = b.paycode and b.receiptType = @receiptType and a.slink = @slink group by b.accountId, a.id
  end
  else
  begin
   insert @accountsWorking
   select b.accountId, null, sum(a.amount),'','','p'+cast(a.id as varchar(14)),0
   from paid a with (NOLOCK), paycodes b 
   where a.paycode = b.paycode and a.slink = @slink group by b.accountId, a.id
  end

-- debit tresurers receipt fund and credit fund receivables
  --insert @accountsWorking select @contraId, null, @paidTotal,'','','',0
if @tokenAmount*-1=@paidTotal
 begin
  insert @accountsWorking
  select altContraId,null, round(sum(amount)*@etrPercent,2),@etrCode,'','',0 from @accountsWorking where altContraId>0 group by altContraId

  select @tokenETRPaidAmount=sum(amount) from @accountsWorking where accountid in (select altcontraid from @accountsworking) and comment=@etrCode
  select @tokenETRPaidAmount, @etrPaid
  if @tokenETRPaidAmount <> @etrPaid
  begin
   select @tokenAccountId = max(altContraId) from @accountsWorking where altContraId>0
   update @accountsWorking set amount = amount - (@tokenETRPaidAmount - @etrPaid) where accountId = @tokenAccountId
  end
  insert @accountsWorking
  select a.accountId,
  a.contraId,
  a.amount-aw.amount,
  a.comment,
  a.sourceCode,
  a.slink2,
  a.altContraId from 
  (select altContraId as accountId,null as contraid, sum(amount) as amount,'' as comment,'' as sourcecode,'' as slink2,0 as altcontraid 
    from @accountsWorking where altContraId>0 group by altContraId) as a,
	@accountsWorking as aw
	where a.accountid = aw.accountid


 end
/*
 begin
  insert @accountsWorking
  select altContraId,null, round(sum(amount)*@etrPercent,2),@etrCode,'','',0 from @accountsWorking where altContraId>0 group by altContraId

  insert @accountsWorking
  select altContraId,null, sum(amount)-round(sum(amount)*@etrPercent,2),'','','',0 from @accountsWorking where altContraId>0 group by altContraId

 end
*/
else
 begin
  insert @accountsWorking
  select @contraId, null, @otherpaid,'','','',0  
  insert @accountsWorking
  select @contraId, null, @etrpaid,@etrCode,'','',0  
 end



  if @receiptType<>'OFFICIAL'
  begin

   insert @ap
    select b.accountId,  case when @receiptType='TRUST' then @receiptId else case when a.altContraId > 0 then altContraId else @contraId end end, sum(a.amount)*-1, 0, 0,a.description,a.sourceCode
    from receiptDetail a with (NOLOCK), dbo.glAccounts b
    where a.slink = @slink and a.fundCode = b.accountCode and b.accountType in ('ACCRUED RECEIVABLE','PURPOSE') group by b.accountId, a.description, a.sourceCode,       a.altContraId

   insert @ap
    select b.accountId, case when a.altContraId > 0 then altContraId else @contraId end, sum(a.amount)*-1, 0, 0, a.description, a.sourcecode
    from receiptDetail a with (NOLOCK), dbo.glAccounts b 
    where a.slink = @slink
     and (select dbo.readString('@accrualcode=', dbo.glAccountGetFundAccrualBlob(a.fundcode,'ACCRUED RECEIVABLE'))) = b.accountCode
     and b.accountcode<>a.fundcode
     and @receiptType<>'TRUST'
    group by b.accountId, a.description, a.sourcecode, a.altContraId

  end 

  update @ap set prorate = amount / cast(@tokenAmount as decimal(19,10))
  update @ap set payAmount = round(@paidTotal * prorate,2)

  declare @sumPayAmount money, @apDiff money  
  select @sumPayAmount = sum(payAmount) from @ap 
  select @apDiff = @sumPayAmount + @paidTotal 
  
  if isnull(@apDiff,0.00) <>  0.00 
   update @ap set payAmount = payAmount - @apDiff where id = 1
   

  insert @accountsWorking select accountId, contraId, payAmount, comment, sourceCode, '', 0 from @ap

-- balance issues? suspend it, cause they are just in the middle of keying in all the payments.  it will balance at post time.
  select @balanceToken = sum(amount) from @accountsWorking
  if isnull(@balanceToken,0) != 0
  begin
   select @log = 'Count:' + cast(count(*) as varchar) + ';Balance:' + cast(sum(amount) as varchar) + ';' from @accountsWorking
   exec dbo.logit @@procId, '@accountsWorking table is out of balance', @log

   insert @accountsWorking
   select 0, 0, @balanceToken * -1, 'Temporarly Suspend Balance', '', '',0

  end
 end 
 
-- gather a list of all the accounts for inserting into the stage
 insert @accounts 
 select accountId, contraId, sum(isnull(amount,0)), comment, sourceCode, slink2
  from @accountsWorking
  group by accountId, contraId, comment, sourceCode, slink2
  having sum(isnull(amount,0)) != 0

-- echo the guts of this proc and bail if you are in test mode
 if @mode = 1
 begin
  select a.*,b.accountType,b.accountDesc from @accounts a, glAccounts b where a.accountId = b.accountId order by b.accountType
  return
 end

 -- remove 
 delete glDetailStage where slink = @slink 

 -- insert
 while exists(select * from @accounts)
 begin
  select top 1
   @tokenId = id,
   @tokenAccountId = accountId,
   @tokenContraId = contraId,
   @tokenAmount = amount,
   @comment = left(rtrim(comment),49),
   @sourceCode = sourceCode,
   @slink2 = slink2
  from @accounts
  insert gldetailstage (slink,accountId,amount,contraId,comment,sourceCode, slink2) select @slink,@tokenAccountId,@tokenAmount,@tokenContraId, @comment, @sourceCode, @slink2
  delete @accounts where id = @tokenId
 end
 
 update a set
  a.accountCode = b.accountCode,
  a.accountDesc = b.accountDesc
 from glDetailStage a, glAccounts b
 where a.accountId = b.accountId
  and a.slink = @slink 

end
