create procedure dbo.receiptPaymentAdd(
 @receiptId int,
 @paycode varchar(50) = '',
 @amount money = 0,
 @checkNumber varchar(50) = '',
 @bankId int = 0,
 @paymentId int = 0,
 @mode int = 0,
 @drawnon varchar(50) = '',
 @location varchar(50) = '',
 @field int = 0
)
as
begin

 set nocount on
 
 if  @paycode = '' or isnull(@amount,0) = 0
  begin
    return
  end

 declare @styp char(1) = 'o'

 declare
  @slink varchar(15) = @styp + cast(@receiptId as varchar),
  @code int,
  @message varchar(100),
  @receiptType varchar(50),
  @suspenseAccountId int,
  @contraId int,
  @fpId int,
  @objectTyp int,
  @balance money,
  @checkReq int,
  @bankReq int,
  @receiptBalanceDue money,
  @changeAmount money

 delete from paid where paycode='CASH' and slink=@slink and checkno='CASH RETURNED' and @checkNumber<>'CASH RETURNED'

 select
  @code = code,
  @message = message,
  @receiptType = receiptType,
  @suspenseAccountId = suspenseAccountId,
  @contraId =contraId,
  @fpId = fpId,
  @objectTyp = objectTyp,
  @receiptBalanceDue = balanceDue
 from dbo.receiptCheck(@receiptId,@paycode)

 select 
  @checkReq = isnull(a16,0),
  @bankReq = isnull(a15,0)
  from object where typ=4505 and key1 = @paycode	

 -- bail if we dont have enough data
 if @code = 1
 begin
  select '@code=1;@message=' + @message + ';'
  return
 end

 -- bail if CHECK # required and no check number is offered
 if @checkReq = 1 and @checkNumber < '  0'-- and @field >= 24
 begin
  select '@code=2;@message=Sorry, Check number is required.;@field=024;'
  return
 end

 -- bail if bank required and no bank  offered
 if @bankReq = 1 and @drawnon < '  0' --and @field >= 26
 begin
  select '@code=2;@message=Sorry, Bank Information is required.;@field=026;'
  return
 end

 -- bail if bank required and no bank location offered
 if @bankReq = 1 and @location < '  0'-- and @field >= 28
 begin
  select '@code=2;@message=Sorry, Bank location is required.;@field=028;'
  return
 end

 -- Add Returned for negative cash totals
 if @paycode = 'CASH' and @amount < 0 and @checkNumber < '  0'
 begin
  select @checkNumber='CASH RETURNED'
 end

 exec dbo.logit @@procid, 'Begin transaction...'
 begin transaction

-- add or update paid
  if isnull(@paymentId,0) < 1
   insert paid (paycode,slink,amount,checkno,bankId,drawnon,location)
    select @paycode,@slink,@amount,@checkNumber,@bankId,@drawnon,@location
  else
   update paid set paycode=@paycode,slink=@slink,amount=@amount,checkno=@checkNumber,bankId=@bankId,drawnon=@drawnon,location=@location where id=@paymentId


-- add to the gl stage
  if @receiptType = 'TAX'
   exec dbo.receiptTaxStageGL @receiptId, @mode
  else
   exec dbo.receiptStageGL @receiptId

 if @checkNumber<>'CASH RETURNED'
 begin
  declare @overpayment money
  select @overpayment = sum(amount) from gldetailstage where slink=@slink and accountId=0
  select @receiptBalanceDue = round(dbo.receiptBalanceDue(@receiptId)+.001,2)

-- add or update CASH RETURNED
  set @changeAmount = case when isnull(@receiptBalanceDue,0) < isnull(@overpayment,0) then isnull(@receiptBalanceDue,0) else isnull(@overpayment,0) end
  if @changeAmount < -.006
  begin
   exec dbo.logit @@procid, 'Hang on, we are making change...'
   if exists(select * from paid where checkno = 'CASH RETURNED' and slink = @slink)
    update paid set amount = round(@changeAmount,2) where checkno = 'CASH RETURNED' and slink = @slink
   else
    insert paid (paycode,slink,amount,checkno)
     select 'CASH', @slink, round(@changeAmount,2), 'CASH RETURNED'
  end

-- add to the gl stage
  if @receiptType = 'TAX'
   exec dbo.receiptTaxStageGL @receiptId, @mode
  else
   exec dbo.receiptStageGL @receiptId
  end



-- get the balance of the glStage to check your work
  if @receiptType = 'TAX'
   select @balance = isnull(balance,0) from dbo.glTaxSummary(@receiptId)
  else
   select @balance = balance from dbo.glSummary(@receiptId,'o')

 exec dbo.logit @@procid, '@balance',@balance

-- TEST Mode we bail
  if @mode = 1
  begin
   exec dbo.logit @@procid, 'in TEST mode, Rollback transaction...'
   rollback transaction
   return
  end

  if @balance != 0
  begin
-- Nate was here

   exec dbo.logit @@procid, 'Rollback transaction... @balance', @balance
   rollback transaction
   select '@code=1;@message=Payment transaction was rolled back. Contact Support. {' + @receiptType + ':' + cast(@balance as varchar) + '};'
   return
  end
  else
   exec dbo.logit @@procid, 'Commit transaction...'
   commit transaction

 select '@code=0;@message=Payment applied OK.;'
 return

end