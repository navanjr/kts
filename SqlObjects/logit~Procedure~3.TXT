create procedure dbo.logit(
 @procId int = null,
 @label varchar(max) = '',
 @value varchar(max) = '',
 @labelb varchar(max) = '',
 @valueb varchar(max) = '',
 @labelc varchar(max) = '',
 @valuec varchar(max) = '',
 @labeld varchar(max) = '',
 @valued varchar(max) = '',
 @control varchar(100) = null,
 @level int = 1
) as
begin

 set nocount on

 declare
  @logitId int,
  @txt varchar(max),
  @tailPath varchar(100),
  @procName varchar(50) = isnull(object_name(@procId),'')
 declare @controlArray table( id int, data varchar(50) )
 
 insert @controlArray select * from dbo.split(@control,'|')

 if (select data from @controlArray where id = 1) in ('start','stop')
 begin

  select @level = cast(data as int) from @controlArray where id = 2 
  select @tailPath = data from @controlArray where id = 3 

  update object set
   b15 = case when (select data from @controlArray where id = 1) = 'start' then 'logging on|'
    + cast(@level as varchar) + case when @tailPath > '  0' then '|' + @tailPath else '' end else 'logging off' end
  where typ = 0 and link1 = -1

  insert keyLog (procName,message,level) select 'logit', 'Log Control:' + @control, @level

  return
 end

 if @control = 'status'
 begin
  select b15 as logging_status from object where typ = 0 and link1 = -1
  return
 end

 if @control = 'list'
 begin
  select top 100 * from keyLog order by time desc
  return
 end

-- get the logging status and level
 declare @loggingStatusArray table( id int, data varchar(50) )
 insert into @loggingStatusArray select * from dbo.split((select b15 from object where typ = 0 and link1 = -1), '|')

-- we bail if logging is not turned on
 if not (select data from @loggingStatusArray where id = 1) = 'logging on'
  return

-- we bail if level is too low
 if @level < (select cast(data as int) from @loggingStatusArray where id = 2)
  return

 set @txt = @label + case when @value > '  0' then ':' + @value else '' end
 if @labelb > '  0'
  set @txt = @txt + '; ' + @labelb + case when @valueb > '  0' then ':' + @valueb else '' end
 if @labelc > '  0'
  set @txt = @txt + '; ' + @labelc + case when @valuec > '  0' then ':' + @valuec else '' end
 if @labeld > '  0'
  set @txt = @txt + '; ' + @labeld + case when @valued > '  0' then ':' + @valued else '' end

 insert keyLog (procName, message, level) select @procName, @txt, @level
 set @logitId = @@identity

-- throw it out to a trace file if enabled
 select @tailPath = replace(data,'/','\') from @loggingStatusArray where id = 3

-- select 
 if @tailPath > '  0'
 begin
  declare @tailPathArray table(id int, data varchar(50))
  declare @tailPathWOFilename varchar(100) = '', @tailFileName varchar(100)
  insert @tailPathArray select * from dbo.split(@tailPath,'\')
  select @tailPathWOFilename = @tailPathWOFilename + data + '\' from @tailPathArray where id < (select MAX(id) from @tailPathArray)
  select top 1 @tailFileName = data from @tailPathArray order by id desc

  select
   @txt = cast(time as varchar)
   + ' Level_' + cast(@level as varchar)
   + ' ' + dbo.padRight(isnull(procName,''),' ',20)
   + ' ' + isnull(message,'') from keyLog where id = @logitId

  exec spWriteStringToFile @txt, @tailPathWOFilename, @tailFileName
 end

end