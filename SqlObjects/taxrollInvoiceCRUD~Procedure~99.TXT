create procedure dbo.taxrollInvoiceCRUD(
 @taxrollId int,
 @smode int = 0,
 @invoiceType varchar (1) = '',
 @invoiceId int = null,
 @debugMode varchar(10) = 'false'
) as
begin

 set nocount on

 exec dbo.logit @@procid, 'Started @invoiceId', @invoiceId

 declare @styp char(1) = 't'
 declare
  @slink varchar(15),
  @code int,
  @arAccountId int,
  @message varchar(500),
  @taxyear varchar(4),
  @district varchar(15),
  @rateName varchar(15),
  @accountBlob varchar(2000),
  @accrualcode varchar(50),
  @targetcode varchar(50),
  @taxrollCheckBlob varchar(max),
  @log varchar(max)

 if isnull(@invoiceId,0) > 0 and @taxrollId is null
  select @taxrollId = taxrollId from invoices where id = @invoiceId
 
 exec dbo.logit @@procid, '@taxrollId', @taxrollId

--TODO: We wants this check to use the postdate from the invoice however we are too lazy to fix this now.

/*
 select
  @code = code,
  @message = message,
  @arAccountId = debitId,
  @slink = slink,
  @taxYear = taxYear,
  @district = district,
  @rateName = rateName
 from dbo.taxrollCheck(@taxrollId,@invoiceType,@invoiceId)
*/
 exec dbo.taxrollCheckProc @taxrollId,@invoiceType,@invoiceId,
  @code = @code output,
  @message = @message output,
  @debitId = @arAccountId output,
  @slink = @slink output,
  @taxYear = @taxYear output,
  @district = @district output,
  @rateName = @rateName output

 select @taxrollCheckBlob = 
  '@code=' + isnull(cast(@code as varchar),'null') + ';'
  + '@message=' + isnull(@message,'null') + ';'
  + '@arAccountId=' + isnull(cast(@arAccountId as varchar),'null') + ';'
  + '@slink=' + isnull(@slink,'null') + ';'
  + '@taxYear=' + isnull(@taxYear,'null') + ';'
  + '@district=' + isnull(@district,'null') + ';'
  + '@rateName=' + isnull(@rateName,'null') + ';'

 exec dbo.logit @@procid, 'taxrollCheck', @taxrollCheckBlob

 if @code = 1 
 begin
  if @smode=0
   begin
    select '@code=1;@message=' + @message + ';'
   end
  return
 end

--TODO: this is necessary cause our taxroll check it not smart enought to handle invoice corrections.
 if isnull(@invoiceId,0) > 0
 begin
  set @slink = 't' + cast(@invoiceId as varchar)
  exec dbo.logit @@procid, 'reset @slink', @slink
 end

 if @invoiceType='S'
  begin
    select @accountBlob = dbo.glAccountGetFundAccrualBlob(@rateName, 'ACCRUED RECEIVABLE')
    select 
     @accrualcode = dbo.readString('@accrualcode=', @accountBlob),
     @targetcode = dbo.readString('@fundcode=', @accountBlob)

    exec dbo.glAccountVerification @accrualcode, 'ACCRUED RECEIVABLE', 'CREATE', @targetAccountCode=@targetcode

--   exec dbo.pilotFundReceivableVerification @taxyear,'',@rateName,''
  end
 else
  begin

   if @invoiceType<>'B'
    begin
     exec dbo.pilotFundReceivableVerification @taxyear,@district,@rateName,''
    end

  end

 declare @invd table(
  id int,
  description varchar(500),
  subDescription varchar(500),
  sourceCode varchar(50),
  sourceId int,
  fundCode varchar(50),
  fundId int,
  amount money
 )
 insert @invd
   select id,description,subDescription,sourceCode,sourceId,fundCode,fundId,amount from dbo.getRates('taxinvoice',null,null,@taxrollId,@invoiceType)


 if not exists(select * from @invd)
 begin
  if @smode = 0
   begin
    select '@code=1;@message=No tax rate detail available.;'
    exec dbo.logit @@procid, '@code=1;@message=No tax rate detail available.;'
    set @log = 'select * from dbo.getRates(''taxinvoice'',null,null,' + cast(@taxrollId as varchar) + ',' + @invoiceType + ')'
    exec dbo.logit @@procid, @log

   end
  return
 end

  declare 
   @idToken int,
   @newAccountId int,
   @acctCodeToken varchar(50)
  
  while exists(select * from @invd where sourceId = 0) 
  begin

   select top 1
    @idToken = id,
    @acctCodeToken = sourceCode 
   from @invd where sourceId = 0 
   
   exec dbo.glAccountVerification @acctCodeToken, 'SOURCE', 'CREATE', @accountId = @newAccountId OUTPUT

   update @invd set sourceId = isnull((select accountid from glaccounts where accountType='SOURCE' and accountCode=@acctCodeToken),0)
     where id = @idToken   

  end

  while exists(select * from @invd where fundId = 0 and @invoiceType<>'S') 
  begin

   select top 1
    @idToken = id,
    @acctCodeToken = fundCode 
   from @invd where fundId = 0 

   exec dbo.glAccountVerification @acctCodeToken, 'ACCRUED RECEIVABLE', 'CREATE', @accountId = @newAccountId OUTPUT

   update @invd set fundId = @newAccountId where id = @idToken   

  end
 
  if exists(select * from @invd where isnull(sourceId,0) = 0)
  begin
   exec dbo.logit @@procid, '@code=1;@message=Missing Source Account Information. Contact Support. (txinv.1);'
   if @debugMode = 'TRUE'
    select * from @invd
   if @smode = 0
    begin
     select '@code=1;@message=Missing Source Account Information. Contact Support. (txinv.1);'
    end
   return
  end
  if exists(select * from @invd where isnull(fundId,0) = 0 and @invoiceType<>'S')
  begin
   exec dbo.logit @@procid, '@code=1;@message=Missing Source Account Information. Contact Support. (txinv.2);'
   if @debugMode = 'TRUE'
    select * from @invd
   if @smode = 0
    begin
     select '@code=1;@message=Missing Source Account Information. Contact Support. (txinv.2);'
    end
   return
  end
  if (select sum(amount) from @invd) = 0
  begin
   exec dbo.logit @@procid, '@code=1;@message=No amount exists to stage GL.;'
   if @debugMode = 'TRUE'
    select * from @invd
   if @smode = 0
    begin
     select '@code=1;@message=No amount exists to stage GL.;'
    end
   return
  end

  exec dbo.logit @@procid, 'begin transaction - @slink', @slink
  begin transaction

  -- insert invoice detail
  insert receiptDetail (slink,description,subDescription,sourceCode,fundCode,amount)
  select
   @slink,
   description,
   subDescription,
   sourceCode,
   fundCode,
   amount
  from @invd

  -- stage the GL
  declare @accountsWorking table(
   accountId int,
   amount money,
   comment2 varchar(50)
  )
  declare 
   @tokenAmount money
 
  -- credit Source and Debit AR
  insert @accountsWorking
   select b.accountId, sum(a.amount)*-1, a.description 
   from receiptDetail a, dbo.glAccounts b 
   where a.slink = @slink and a.sourceCode = b.accountCode group by b.accountId, a.description
  select @tokenAmount = abs(sum(amount)) from @accountsWorking
  insert @accountsWorking select @arAccountId, @tokenAmount, ''

  -- insert
  insert gldetailstage (slink,accountId,amount,comment2) select @slink,accountId,amount,comment2 from @accountsWorking where amount != 0
 
  update a set
   a.accountCode = b.accountCode,
   a.accountDesc = b.accountDesc
  from glDetailStage a, glAccounts b
  where a.accountId = b.accountId
   and a.slink = @slink 

  -- post to the gl
  declare @test int = substring(@slink,2,14)
  exec dbo.logit @@procid, 'prepare to glPost - @slink', @slink, '@test', @test
  exec dbo.glPost @test, @styp, @smode
  
  -- Check glDetail for good data
  if (select dbo.glPostCheck(@slink)) = 1 
  begin
   exec dbo.logit @@procid, 'rollback transaction'
   rollback transaction
   if @smode = 0
    begin
     select '@code=1;@message=Failed post GL check. Contact Support. (txinv.3);'
     exec dbo.logit @@procid, '@code=1;@message=Failed post GL check. Contact Support. (txinv.3);'
    end
   return
  end

  -- flag as posted
--  update taxReference set [status] = 'Posted' where id = @taxrollId
  
 exec dbo.logit @@procid, 'commit transaction'
 commit transaction

end