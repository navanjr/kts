create procedure dbo.receiptTaxStageGL (@receiptId int, @mode int = 0) as
begin

 declare @receiptSlink varchar(15) = 'o' + cast(@receiptId as varchar)

 declare @wt table(
  linkid int,
  invoiceId int,
  slink varchar(15),
  invoiceSLink varchar(15),
  taxYear varchar(10),
  due money default 0,
  methodRate money,
  applyAmount money default 0,
  arAccountId int,
  contraAccountId int,
  processFlag int default 0
 )
 declare @glFundDebits table(
  slink varchar(15),
  fundCode varchar(50),
  accountId int,
  amount money,
  prorate decimal(19,18),
  payAmount decimal(19,10),
  contraId int,
  due money
 )
 declare @glSalesCredits table(
  slink varchar(15),
  accountId int,
  amount money,
  contraId int
 )
 declare @glSuspense table(
  slink varchar(15),
  accountId int,
  amount money
 )
 declare @glStage table(
  slink varchar(15),
  accountId int,
  amount money,
  contraId int,
  processType varchar(50)
 )

 declare
  @paidTotal money,
  @idToken int,
  @dueToken money,
  @amountToken money,
  @currTaxId int,
  @priorTaxId int,
  @backTaxId int,
  @currTaxCode varchar(10),
  @priorTaxCode varchar(10)

--TODO: bail if there is already gldetail for these receiptLinks 
--TODO: bail if we are offered too much money

-- get the invoices linked to this receipt
 insert @wt (linkId, invoiceId, slink, invoiceSLink, methodRate, taxyear)
  select a.id, a.invoiceId, 'l'+cast(a.id as varchar), 't'+cast(a.invoiceId as varchar), a.methodRate, b.taxYear 
  from receiptLink a, invoices b 
  where a.invoiceId = b.id and a.receiptId = @receiptId

-- calculate the balance due, update AR and Contra account id
 select @currTaxId = accountId, @currTaxCode=code from glAccounts where accountCode = 'CURTAX'
 select @priorTaxId = accountId, @priorTaxCode=code from glAccounts where accountCode = 'PRIORTAX'
 select @backTaxId = accountId from glAccounts where accountCode = 'BACKTAX'
 update @wt set
  due = round((select due from dbo.invoiceCheck(invoiceId)),2),
  arAccountId = (select arAccountId from dbo.invoiceCheck(invoiceId)),
  contraAccountId = case when taxYear = @currTaxCode then @currTaxId when taxyear=@priorTaxCode then @priorTaxId else @backTaxId end
   where invoiceId > 0

-- populate Suspense
-- get all the payments linked to this receipt
 insert @glSuspense
 select @receiptSlink, b.accountId, round(sum(a.amount),2)
  from paid a, paycodes b 
  where a.paycode = b.paycode and a.slink = @receiptSlink group by b.accountId
 select @paidTotal = round(sum(amount),2) from @glSuspense

 while exists(select * from @wt where processFlag = 0)
 begin
  select top 1 @idToken = linkId, @dueToken = due * methodRate from @wt where processFlag = 0 order by methodRate desc, linkId
  if @paidTotal > 0
  begin
   if @dueToken <= @paidTotal
    update @wt set applyAmount = @dueToken where linkId = @idToken
   else
    update @wt set applyAmount = @paidTotal where linkId = @idToken
   set @paidTotal = @paidTotal - @dueToken
  end
  update @wt set processFlag = 1 where linkId = @idToken
 end

-- populate fundDebits
-- add the debit to funds accounts from the invoice detail
 insert @glFundDebits
 select
  c.slink, a.fundCode, 0, round(sum(a.amount),2) as amount,max(c.applyAmount/c.due),max(c.applyAmount/c.due)*sum(a.amount), c.contraAccountId, c.due
 from receiptDetail a, @wt c 
 where a.slink = c.invoiceSLink and c.due<>0.00
 group by c.slink, a.slink, a.fundCode, c.contraAccountId,c.due

 update @glFundDebits set amount=due where abs(amount)>abs(due)
 update @glFundDebits set payamount=due where abs(payamount)>abs(due)


-- update the fundDebits with the proper accountId
 update a set a.accountId = b.accountId 
  from @glFundDebits a, glAccounts b
  where a.fundCode = b.targetAccountCode and b.accountType='ACCRUED RECEIVABLE'
 update a set a.accountId = b.accountId 
  from @glFundDebits a, glAccounts b
  where a.fundCode = b.accountCode and a.accountId = 0


-- add the credit to the Treasures collection Account and include the contraId to the receiptLink parent
 insert @glSalesCredits 
 select @receiptSlink, a.contraAccountId, round(sum(b.payAmount)*-1,2), null
 from @wt a, @glFundDebits b
 where a.slink = b.slink
 group by b.slink, a.contraAccountId, a.slink

-- add the credit to AR Accounts
 insert @glSalesCredits 
 select b.slink, a.arAccountId, round(sum(b.payAmount)*-1,2), null 
 from @wt a, @glFundDebits b
 where a.slink = b.slink
 group by b.slink, a.arAccountId

 insert @glStage
  select slink,accountId,round(payAmount,2) as payAmount,contraId,'fundDebit' from @glFundDebits
 union all
  select *,'salesCredit' from @glSalesCredits
 union all
  select *,null,'suspense' from @glSuspense

-- echo the guts of this proc and bail if you are in test mode
 if @mode = 1
 begin
  select a.*,b.accountDesc,b.accountType from @glStage a, glAccounts b where a.accountId = b.accountId order by a.processType
  return
 end

-- remove any existing stage records
 delete glDetailStage where slink in (select slink from @glStage)

-- insert
 insert gldetailstage (slink,accountId,amount,contraId) select slink, accountId, round(amount,2), contraId from @glStage where amount != 0
 
 update a set
  a.accountCode = b.accountCode,
  a.accountDesc = b.accountDesc
 from glDetailStage a, glAccounts b
 where a.accountId = b.accountId
  and a.slink in (select slink from @glStage)

end
