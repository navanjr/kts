create proc dbo.apiReceipts(
 @taxyear varchar(4) = 'ALL',
 @method varchar(50) = 'GET',
 @batchSize int = null,
 @postFile varchar(50) = 'apiPostReceipts.json',
 @scratchFile varchar(1000) = null,
 @debugMode varchar(5) = 'FALSE',
 @result varchar(max) = null output,
 @dropRawFile varchar(5) = 'FALSE',
 @excludeDeleted varchar(5) = 'FALSE'
) as
begin
 set nocount on

 exec dbo.logit @@procid, '@method', @method, '@batchSize', @batchSize, @override = 'TRUE'

 declare
  @resource varchar(50) = 'receipts',
  @apiService varchar(50),
  @tempPath varchar(50), 
  @postFileFull varchar(100), 
  @postFileFullRaw varchar(100), 
  @apiCode varchar(50),
  @apiwt JSONHierarchy,
  @filter varchar(500),
  @apiResource varchar(50) = '/v2/treasurer/receipts',
  @dump varchar(max),
  @dumpRaw varchar(max),
  @log varchar(max),
  @tokenId int,
  @apiResultWt JSONHierarchy,
  @theDate datetime,
  @updated int,
  @inserted int,
  @tally int,
  @goofyChars varchar(100) = '13,10,9,167,248,34,39'

 exec dbo.keyAcVars 'acapiservice', @silentMode = 'TRUE', @dump = @apiService output
 exec dbo.logit @@procid, '@method', @method, '@batchSize', @batchSize, '@apiService', @apiService, @override = 'TRUE'
 
 select @tempPath = path from dbo.paths() where name = 'temp'
 select top 1 @apiCode = b12 from object where typ = 40 order by id
 set @postFileFull = @tempPath + '\' + @postFile
 set @postFileFullRaw = @tempPath + '\' + @postFile + '.raw'
 if @scratchFile is null
  set @scratchFile = @tempPath + '\' + 'apiResultReceipts.tmp'

 declare @jsonPrep table(
  id int identity(1,1),
  parentId int,
  objectId int,
  name varchar(50),
  value varchar(500),
  type varchar(50)
 )

 declare @wt table(
  parentId int identity(1,1),
  invoice_link int,
  receipt_number varchar(50),
  receipt_link int,
  glSlink varchar(15),
  receiptDate int,
  post_Date varchar(20),
  paid_Date varchar(20),
  paid_by varchar(50),
  paid_fees money,
  paid_penalties money,
  paid_total money
  )				

 if @method = 'JOB'
 begin
  select @batchSize = coalesce(@batchSize, batchSize) from dbo.apiControlBRW() where resource = @resource
  exec dbo.apiReceipts
   @method = 'POST',
   @batchSize = @batchSize,
   @dropRawFile = @dropRawFile,
   @debugMode = @debugMode,
   @excludeDeleted = @excludeDeleted
 end

 if @method = 'POST'
 begin

  if not @excludeDeleted = 'TRUE'
  begin
 -- deleted receipts
   declare
    @deletedBatchSize int = 20,
    @deletedReceiptsStringBlob stringBlob

   if @batchsize < @deletedBatchSize
    set @deletedBatchSize = @batchSize

   insert @deletedReceiptsStringBlob
   select top (@deletedBatchSize) cast(dbo.slinkId(slink) as varchar) + '|' + cast(isnull(invoice_link,'') as varchar) + '|' + typ from dbo.apiReceiptIds() where typ in  ('deletedReceipt','voidReceipt')
   if exists(select * from @deletedReceiptsStringBlob)
   begin
    declare 
     @apiDeletedFields blobFields,
     @payload varchar(max),
     @deletedTally int

 -- reset the batch size for use in the final comparison
    select @deletedBatchSize = count(*) from @deletedReceiptsStringBlob

    insert @apiDeletedFields select 'receipt_link','int',0
    insert @apiDeletedFields select 'invoice_link','int',0
    exec dbo.pipedStringToJson @deletedReceiptsStringBlob, @apiDeletedFields, @urlEncode = 'TRUE', @payload = @payload output

    exec spOverwriteTextFile @postFileFull, @payload
    exec dbo.logit @@procid, '@deletedBatchSize', @deletedBatchSize
    exec dbo.api
     @method = 'DELETE',
     @resource = @apiResource,
     @postFile = @postFile,
     @debugMode = @debugMode,
     @scratchfile = @scratchFile,
     @cmdOutput = @tokenId output,
     @dump = @dump output

    if not @debugMode = 'TRUE'
    begin
     select @deletedTally = dbo.apiResultDecoder('deleted', @dump) 
     if isnull(@deletedTally,0) = @deletedBatchSize
     begin
      set @theDate = getDate()
      if exists (select * from @deletedReceiptsStringBlob where dbo.splitF(blob,'|',3) = 'deletedReceipt') 
       update apiDeleted set apiUpdated = @theDate where apiResource = 'receipts' and slink in (select 'o' + dbo.splitF(blob,'|',1) from @deletedReceiptsStringBlob)
      if exists (select * from @deletedReceiptsStringBlob where dbo.splitF(blob,'|',3) = 'voidReceipt')
        update o set k7 = @theDate from object o inner join @deletedReceiptsStringBlob on dbo.splitF(blob,'|',1) = o.ID where dbo.splitF(blob,'|',3) = 'voidReceipt'
      exec dbo.logit @@procid, 'Success...', @dump,'updated apiDeleted rows... @@rowcount', @@rowCount, @override = 'TRUE'
     end
     else
     begin
      exec dbo.logit @@procid, 'Failure...', @dump, @override = 'TRUE'
     end
    end
   end
   else
   begin
    exec dbo.logit @@procid, 'all deleted receipt records updated... nothing to do. :)', @override = 'TRUE'
   end
  end

-- create the post data file then call the API
  declare @it table (receiptId int)

  insert @it 
  select top (@batchsize) id
  from dbo.apiReceiptIds()
  where typ = 'receipt'
  order by ID 

-- bail if your done... 
  select @tally = count(*) from @it
  if isnull(@tally,0) = 0
  begin
     exec dbo.logit @@procid, 'all receipt records updated... nothing to do. :)', @override = 'TRUE'
     set @tally = 0
     return
  end
		
  insert @wt
     select
       c.ID,
       a.receiptNumber,
       a.receiptId,
       'l' + CAST(a.id as varchar),
       '',
       '',
       '',
       dbo.stripChars(c.NAME,@goofyChars),
       0,
       0,
       0
--       sum(b.amount) -- MAK 07/21/2014
      from receiptLink a, receiptDetail b, invoices c
     where 't'+CAST(a.invoiceId as varchar) = b.slink
         and a.receiptId in (select i.receiptId from @it i)
         and a.invoiceId = c.ID
         and a.receiptNumber>'  0'
        group by c.id,c.invoiceId, c.TAXROLLID, a.protestAmount, a.receiptNumber, c.taxyear, c.NAME,a.receiptId, a.id
        
     update @wt set
       paid_by =   dbo.stripChars(case when a1>'  0' then a1 else paid_by end,@goofyChars),
     --  paid_Total =  dbo.taxReceiptTaxPaid(receipt_link,invoice_link,0),
       paid_Date = coalesce(nullif(dbo.date112(b10),''),nullif(dbo.date112(key2),''),'0'),
       post_Date = dbo.date112(key2)
      from @wt,object where id = receipt_link

     update a set a.paid_total = b.amount
     from @wt a, gldetail b
     where a.glSlink = b.slink	
      and b.accountcode in (select accountcode from glaccounts where accounttype = 'Accrued Receivable')

  select @batchsize = count(invoice_link) from @wt
        
  declare @wt2 table (id int, rid int, penalty money, fee money)

	insert @wt2
		select 
		   i.invoiceId,
                   rl.receiptid,
           sum(case when i.invoiceId>0 and i.TYP='P' then g.amount else 0 end),
		   sum(case when i.invoiceId>0 and i.TYP<>'P' and i.typ<>'A' then g.amount else 0 end)
		from invoices i, receiptlink rl, @wt w, gldetail g 
                 where i.id = rl.invoiceid 
                  and g.slink = 'l'+cast(rl.id as varchar)
                  and g.accountcode in (select accountcode from glaccounts where accounttype = 'Accrued Receivable')
                  and w.invoice_link = i.invoiceId			
                  and w.receipt_link = rl.receiptid
		group by i.invoiceId, rl.receiptid
    
    update w set
			paid_penalties = penalty,
			paid_fees = fee,
			paid_total = paid_total + penalty + fee
			from @wt w,@wt2 w2, receiptlink rl 
                          where w2.id = w.invoice_link
                           and w2.rid = w.receipt_link

  if @debugMode = 'TRUE'
  begin
   select * from @wt order by receipt_link
   select * from @wt2
  end
			
-- insert into jsonprep			
  insert @jsonPrep select parentId,null,'site_id',@apiCode,'int' from @wt
  insert @jsonPrep select parentId,null,'receipt_number',receipt_number,'string' from @wt
  insert @jsonPrep select parentId,null,'receipt_link',receipt_link,'int' from @wt
  insert @jsonPrep select parentId,null,'invoice_link',invoice_link,'int' from @wt
  insert @jsonPrep select parentId,null,'post_date',post_date,'string' from @wt

  insert @jsonPrep select parentId,null,'paid_total',paid_total,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_penalties',paid_penalties,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_fees',paid_fees,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_date',paid_date,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_by',paid_by,'string' from @wt

-- insert lowest level object wrapper
  select @tokenId = MAX(id) + 1 from @jsonPrep
  insert @jsonPrep (objectId,parentId,name,value,type) 
  select parentId,@tokenId,null,'','object' from @jsonPrep group by parentId
-- insert array wrapper
  insert @jsonPrep (objectId,name,value,type) 
  select @tokenId,'','','array'

  insert @apiwt select * from @jsonPrep
  select @log = 'count of @apiwt ' + cast(count(*) as varchar) from @apiwt
  exec dbo.logit @@procid, @log, @override='TRUE' 
  select @dump = 'site_id='+@apiCode+'&rows='+dbo.URLEncode(dbo.toJSON(@apiwt))
  select @dumpRaw = 'site_id='+@apiCode+'&rows='+dbo.toJSON(@apiwt)

  exec spOverwriteTextFile @postFileFull, @dump
--exec dbo.logit @@procId, 'Nate', @dropRawFile
  if @dropRawFile = 'TRUE'
   exec spOverwriteTextFile @postFileFullRaw, @dumpRaw

  exec dbo.api
   @method = @method,
   @resource = @apiResource,
   @postFile = @postFile,
   @debugMode = @debugMode,
   @scratchfile = @scratchFile,
   @cmdOutput = @tokenId output,
   @dump = @dump output

  set @result = @dump 

  if not @debugMode = 'TRUE'
  begin
   insert @apiResultWt select * from dbo.parseJSON(@dump)
   select @updated = cast(stringValue as int) from @apiResultWt where name = 'updated' and valueType = 'int'
   select @inserted = cast(stringValue as int) from @apiResultWt where name = 'created' and valueType = 'int'
   if isnull(@updated,0) + isnull(@inserted,0) =  @batchSize
   begin
    set @theDate = getDate()
    update object set k7 = @theDate where id in (select receiptId from @it)
    exec dbo.logit @@procid, 'Success...', @dump, @override = 'TRUE'
   end
   else
   begin
    exec dbo.logit @@procid, 'Failure...', @dump, @override = 'TRUE'
   end
  end
  return
 end

end
