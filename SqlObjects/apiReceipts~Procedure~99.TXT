create proc dbo.apiReceipts(
 @taxyear varchar(4) = 'ALL',
 @method varchar(50) = 'GET',
 @batchSize int = 10,
 @postFile varchar(50) = 'apiPostReceipts.json',
 @scratchFile varchar(1000) = null,
 @debugMode varchar(5) = 'FALSE',
 @result varchar(max) = null output
) as
begin
 set nocount on

 exec dbo.logit @@procid, '@method', @method, '@batchSize', @batchSize

 declare
  @resource varchar(50) = 'receipts',
  @apiService varchar(50),
  @tempPath varchar(50), 
  @postFileFull varchar(100), 
  @apiCode varchar(50),
  @apiwt JSONHierarchy,
  @filter varchar(500),
  @apiResource varchar(50) = '/v2/treasurer/receipts',
  @dump varchar(max),
  @log varchar(max),
  @tokenId int,
  @apiResultWt JSONHierarchy,
  @theDate datetime,
  @updated int,
  @inserted int,
  @tally int,
  @goofyChars varchar(100) = '13,10,9,167,248,34,39'

 exec dbo.keyAcVars 'acapiservice', @silentMode = 'TRUE', @dump = @apiService output
 exec dbo.logit @@procid, '@method', @method, '@batchSize', @batchSize, '@apiService', @apiService
 
 select @tempPath = path from dbo.paths() where name = 'temp'
 select top 1 @apiCode = b12 from object where typ = 40 order by id
 set @postFileFull = @tempPath + '\' + @postFile
 if @scratchFile is null
  set @scratchFile = @tempPath + '\' + 'apiResultReceipts.tmp'


 declare @jsonPrep table(
  id int identity(1,1),
  parentId int,
  objectId int,
  name varchar(50),
  value varchar(500),
  type varchar(50)
 )

 declare @wt table(
  parentId int identity(1,1),
  invoice_link int,
  receipt_number int,
  receipt_link int,
  post_Date varchar(20),
  paid_Date varchar(20),
  paid_by varchar(50),
  paid_fees money,
  paid_penalties money,
  paid_total money
  )				

 if @method = 'JOB'
 begin
  select @batchSize = dbo.readString('@batchSize=',blob) from dbo.apiControlBRW() where resource = @resource
  exec dbo.apiReceipts @method = 'POST', @batchSize = @batchSize
 end

/*
 if @method = 'STATUS'
 begin
  declare @taxyearToken varchar(4)
  declare @taxyears table(year varchar(4))
  declare @status table(taxyear varchar(4), total int, stale int, percentStale money)
  if not @taxyear = 'ALL' 
   insert @taxyears select @taxYear
  else
   insert @taxyears select taxyear from invoices group by taxyear

  insert @status select taxYear, count(id), sum(case when isnull(k7,0) < lasteditdate then 1 else 0 end), null
   from  object where typ=4502 and key3='TAX'

  while exists(select * from @taxyears)
  begin
   select top 1 @taxYearToken = year from @taxyears order by year
   update @status set percentStale = (cast(stale as money)/cast(total as money)) * 100.0
   select @log = '@taxyear=' + taxyear + ';' 
    + '@total=' + cast(total as varchar) + ';'
    + '@stale=' + cast(stale as varchar) + ';'
    + '@%stale=' + cast(percentStale as varchar) + '%;'
   from @status where taxyear = @taxyearToken
   exec dbo.logit @@procid, @log
   delete @taxyears where year = @taxyearToken
  end
  return
 end
 */

 if @method = 'POST'
 begin

-- create the post data file then call the API
declare @it table (receiptId int)

 insert @it select top (@batchsize)
    
		Id
		from Object 
		where typ = 4502 and Key3 = 'TAX' and k7 < dbo.date112(LastEditDate)
		order by ID 
		
		
  insert @wt
     select
       c.ID,
       a.receiptNumber,
       a.receiptId,
       '',
       '',
       c.NAME,
       0,
       0,
       sum(b.amount)
   
      from receiptLink a, receiptDetail b, invoices c
     where 't'+CAST(a.invoiceId as varchar) = b.slink
         and a.receiptId in (select i.receiptId from @it i)
         and a.invoiceId = c.ID
         and a.receiptNumber>'  0'
        group by c.id,c.invoiceId, c.TAXROLLID, a.protestAmount, a.receiptNumber, c.taxyear, c.NAME,a.receiptId
        
     update @wt set
       paid_by =   case when a1>'  0' then a1 else paid_by end,
       paid_Total =  dbo.taxReceiptTaxPaid(receipt_link,invoice_link,0),
       paid_Date = dbo.date112(b10),
       post_Date = dbo.date112(key2)
      from @wt,object where id = receipt_link

  select @batchsize = count(invoice_link) from @wt
        
  declare @wt2 table (id int,penalty money,fee money)

	insert @wt2
		select 
		   invoiceId,
           sum(case when invoiceId>0 and TYP='P' then invoiceamount else 0 end),
		   sum(case when invoiceId>0 and TYP<>'P' and typ<>'A' then invoiceamount else 0 end)
		from invoices,@wt where invoice_link = invoiceId			
		group by invoiceId
    
    update w set
			paid_penalties = penalty,
			paid_fees = fee,
			paid_total = paid_total + penalty + fee
			from @wt w,@wt2 w2 where w2.id = w.invoice_link
			
-- insert into jsonprep			
  insert @jsonPrep select parentId,null,'site_id',@apiCode,'int' from @wt
  insert @jsonPrep select parentId,null,'receipt_number',receipt_number,'string' from @wt
  insert @jsonPrep select parentId,null,'receipt_link',receipt_link,'int' from @wt
  insert @jsonPrep select parentId,null,'invoice_link',invoice_link,'int' from @wt
  insert @jsonPrep select parentId,null,'post_date',post_date,'string' from @wt

  insert @jsonPrep select parentId,null,'paid_total',paid_total,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_penalties',paid_penalties,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_fees',paid_fees,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_date',paid_date,'int' from @wt
  insert @jsonPrep select parentId,null,'paid_by',paid_by,'string' from @wt

-- insert lowest level object wrapper
  select @tokenId = MAX(id) + 1 from @jsonPrep
  insert @jsonPrep (objectId,parentId,name,value,type) 
  select parentId,@tokenId,null,'','object' from @jsonPrep group by parentId
-- insert array wrapper
  insert @jsonPrep (objectId,name,value,type) 
  select @tokenId,'','','array'

  insert @apiwt select * from @jsonPrep
  select @dump = 'site_id='+@apiCode+'&rows='+dbo.URLEncode(dbo.toJSON(@apiwt))

  exec spOverwriteTextFile @postFileFull, @dump
  
  exec dbo.api
   @method = @method,
   @resource = @apiResource,
   @postFile = @postFile,
   @debugMode = @debugMode,
   @scratchfile = @scratchFile,
   @cmdOutput = @tokenId output,
   @dump = @dump output

  set @result = @dump 

  insert @apiResultWt select * from dbo.parseJSON(@dump)
  select @updated = cast(stringValue as int) from @apiResultWt where name = 'updated' and valueType = 'int'
  select @inserted = cast(stringValue as int) from @apiResultWt where name = 'created' and valueType = 'int'
  if isnull(@updated,0) + isnull(@inserted,0) =  @batchSize
  begin
   set @theDate = getDate()
   update object set k7 = @theDate where id in (select receiptId from @it)
   exec dbo.logit @@procid, 'Success...', @dump
  end
  else
  begin
   exec dbo.logit @@procid, 'Failure...', @dump
  end

  return
 end

end