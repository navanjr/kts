create proc dbo.conversion_mikeWarrantsOutstanding(
 @mode varchar(50) = 'conversion',
 @method varchar(10) = 'GET',
 @class varchar(50) = null output,
 @code int = 0 output,
 @message varchar(100) = null output,
 @tally int = 0 output,
 @fixProc varchar(100) = null output,
 @guide varchar(100) = null output,
 @csvBlob varchar(max) = '' output
) as 
begin
 set nocount on

 if @mode != 'conversion'
  return

 declare @st table(
  wfy varchar(2),
  fundid varchar(8),
  altfund varchar(8),
  altbank varchar(8),
  cityacct varchar(8),
  f4 int,
  f5 char(1),
  warno varchar(5),
  dteissue varchar(8),
  dteregis varchar(8),
  paywhom varchar(30),
  amnt numeric(11,2),
  intpaid numeric(11,2),
  payable char(1),
  dtepaid varchar(8),
  paymtno varchar(5),
  trchkno  varchar(20),
  bank varchar(30),
  f6 char(1),
  dtecancl varchar(8),
  pfy varchar(2),
  f8 char(1),
  convertedDate varchar(50),
  tresFundCode varchar(50),
  paymentId int,
  csv varchar(max),
  clerksCode varchar(50)
 )

 declare
  @mikeTableName varchar(50) = 'warrant',
  @mikePath varchar(max),
  @sql nvarchar(max),
  @conversionDate varchar(50) = dbo.settingsF('conversion.conversionDate',''),
  @cutoffDate varchar(50) = dbo.settingsF('conversion.cutoffDate',''),
  @bankCode varchar(60),
  @bankBlobCode varchar(100),
  @warrantsHitLedgerWhenRegistered varchar(5)

 select @warrantsHitLedgerWhenRegistered = settingvalue from dbo.settings where settingname='site.warrantsHitLedgerWhenRegistered'

 if @warrantsHitLedgerWhenRegistered='TRUE'
 begin
  select top 1 @bankCode = key1 from object where typ=4701 and key3='WARRANT' and a1='BANK'
  select top 1 @bankBlobCode = '@officialBankCode='+key1+';' from object where typ=4701 and key3='WARRANT' and a1='BANK'
 end

 if @conversionDate > '  0'
 begin
  select
   @mikePath = dbo.settingsF('conversion.mikepath','') + '\' + @mikeTableName + '.dbf',
   @sql = 'select *,null,null,null,null,null from openrowset(''VFPOLEDB'',''' + @mikePath + ''';'''';'''',''SELECT * FROM ' + @mikeTableName + ' where amnt != 0.00 and !deleted() and (dtePaid = "" or dtePaid > "'+@conversionDate+'")'')'

-- removed to get all warrants entered, even the ones entered after @conversionDate
-- and dteRegis <= "'+@conversionDate+'"

  insert @st exec(@sql)

-- insert @st select * from temp_mikeWarrantsOutstanding

  update a set a.clerksCode = b.clerksFundCode
   from @st a, clerksFundList b
   where a.fundid = b.accountCode 
  update @st set convertedDate = @conversionDate where dteregis <= @conversionDate
  update @st set convertedDate = dteregis where dteregis > @conversionDate
  update @st set csv = wfy + ',' + ltrim(rtrim(isnull(clerksCode,'unknown('+fundid+')'))) + ',' + warno + ',' + convertedDate + ',,' + cast(amnt as varchar) + ',' + ltrim(rtrim(paywhom))

-- get the debit account code that would be used during a normal import
  update s set s.tresFundCode = rtrim(l.accountCode) + '_WR'
  from @st s
  join clerksFundList l on  s.clerksCode = l.clerksFundCode

-- get the paymentid from KTS so we dont import twice  
  update s set s.paymentId = p.id
  from @st s, payments p
  where s.tresFundCode = p.debitAccountCode and cast(s.warno as int) = p.clerksNumber 

  set @csvBlob = ''
  select @csvBlob = @csvBlob + csv + char(10) + char(13) from @st where dteregis >  @cutoffDate

 end

 if @method = 'GET' 
 begin  
  if @conversionDate > '  0'
   select 
    @class = 'conversion',
    @guide = 'GET|SHOW|FIX',
    @code = case when count(*) > 0 then 1 else 0 end,
    @tally = COUNT(*),  
    @message = 'Outstanding Warrants not found in KTS'
   from @st where isnull(paymentId,0) = 0
  else
   select 
    @class = 'conversion',
    @guide = 'GET|SHOW|FIX',
    @code = 1,
    @tally = 1,  
    @message = 'missing converionDate variable'
 end

 if @method = 'SHOW'
 begin  

  declare
   @csvTally int,
   @importTally int
  select @csvTally = COUNT(*) from @st
  select @importTally = COUNT(*) from dbo.warrantImportBRW(null,@csvBlob,@bankCode) where postCheck = 0
  exec dbo.logit @@procid, '@csvTally', @csvTally, '@importTally', @importTally

  select * from dbo.warrantImportBRW(null,@csvBlob,@bankCode) order by ord, clerksFund
-- select * from @st where dteregis >  @cutoffDate
 end

 if @method = 'cache'
 begin  

  if exists(select * from dbo.sysobjects where id = object_id(N'[dbo].[temp_mikeWarrantsOutstanding ]') and OBJECTPROPERTY(id, N'IsTable') = 1)
   drop table temp_mikeWarrantsOutstanding 

  select *
  into temp_mikeWarrantsOutstanding 
  from @st
  order by fundId, Warno

 end

 if @method = 'FIX'
 begin
  declare 
   @initials varchar(50) = dbo.settingsF('conversion.initials','')

  exec dbo.paymentsImportBatch
   @paymentType = 'warrant',
   @batchId = null,
   @ini = @initials,
   @csvBlob = @csvBlob,
   @debugMode = 'FALSE',
   @comments = 'Imported from KPS',
   @officialBlob = @bankBlobCode 

-- now lets update the postdate for each warrant just imported
  declare @ids ids
  insert @ids 
  select id From payments
  where paymentType = 'Warrant'
   and cast(comment as varchar) = 'Imported from KPS'
   and dateRegistered != clerksDate
  declare @tokenId int
  while exists(select * From @ids)
  begin
   select @tokenId = min(id) from @ids
   update object set key2 = a1 where typ = 4771 and id = @tokenId
   delete @ids where id = @tokenId
  end
  
  return

 end

end