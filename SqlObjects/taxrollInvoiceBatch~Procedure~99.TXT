CREATE procedure [dbo].[taxrollInvoiceBatch](
 @taxYear varchar(4),
 @processCount int,
 @initials varchar(50),
 @noInvoice varchar(5) = 'FALSE',
 @debugMode varchar(5) = 'FALSE',
 @verbose varchar(5) = 'FALSE'
)
as

begin

 set nocount on

 exec dbo.logit @@procid, '@taxYear', @taxYear, '@processCount', @processCount, '@initials', @initials, '@noInvoice', @noInvoice

 declare 
  @sql varchar(500),
  @idToken int,
  @newInvoiceId int,
  @slink varchar(15),
  @tally int,
  @resultTally int,
  @processCode varchar(50) = @taxYear + '.' + @initials

-- TODO: we could have some resume batch options here

 insert taxrollInvoiceProcessing
 select top(@processCount)
  id, @taxYear, @processCode 
 from adtax where [RealTaxYear] = @taxYear
  and [BALANCEDUE] > 0
  and id not in (select taxrollId from invoices where taxyear = @taxYear and typ<>'s')
  and id not in (select id from taxrollInvoiceProcessing where taxyear = @taxYear)

 exec dbo.logit @@procid, 'inserted into taxrollInvoiceProcessing... @@rowCount', @@rowCount
 
 if @noInvoice = 'TRUE'
 begin
  exec dbo.logit @@procid, 'bailing cause we are just creating the invoice batch... :)'
  return
 end

 exec dbo.createAdtaxMillageSources
 exec dbo.createAdtaxMillageReceivables
 exec dbo.createAdtaxCollectionReceivables

 declare @rt table(id int, resultInt int) 

 select @tally = count(*) from taxrollInvoiceProcessing where processCode = @processCode

 while exists(select * from taxrollInvoiceProcessing where processCode = @processCode)
 begin
  select top 1 @idToken = id from taxrollInvoiceProcessing where processCode = @processcode

  exec dbo.logit @@procid, 'Begin Transaction - @idToken', @idToken, 'Countdown @tally', @tally
  set @tally = @tally - 1
  begin transaction

   exec dbo.taxReferenceCRUD @idToken, @newInvoiceId = @newInvoiceId output



   exec dbo.taxrollInvoiceCRUD @idToken, 1, 'B', @updateInvoice = 'FALSE', @skipSQLTransaction = 'TRUE', @debugMode = @debugMode , @verbose = @verbose
   exec dbo.taxRollAddressInsert @idToken, ''

   select @slink = slink from dbo.taxrollCheck(@idToken,'',@newInvoiceId)
   if dbo.glPostCheck(@slink) = 0
   begin
    insert @rt select @idToken, 0
    exec dbo.logit @@procid, 'Commit Transaction - @idToken', @idToken
    commit transaction
    exec dbo.invoiceUpdate @newInvoiceId
   end
   else
   begin 
    insert @rt select @idToken, 1
    exec dbo.logit @@procid, 'rollback Transaction - @idToken', @idToken
    rollback transaction
   end

   delete taxrollInvoiceProcessing where id = @idToken and processCode = @processCode

 end

 select @resultTally = count(*) from @rt where resultInt = 0

 if isnull(@resultTally,0) = @processCount
  select '@code=0;@message=OK;'
 else
  select '@code=1;@message='+cast(@processCount - isnull(@resultTally,0) as varchar)+' records failed to process correctly, Contact Support. (tx.inv.Batch);'

end