create procedure dbo.mike_taxRatesImport as 
begin

 set nocount on

declare
 @sql nvarchar(500),
 @parm nvarchar(500),
 @idToken varchar(150),
 @millToken numeric(19,10),
 @rateToken numeric(19,10),
 @yearToken int

declare @districtNames table(
 id int identity(1,1),
 district varchar(50),
 rateName varchar(50),
 totalMills decimal(19,10),
 year int,
 flag int
)

declare @rates table(
 id int identity(1,1),
 impLink int,
 district varchar(50),
 districtId int,
 rateName varchar(50),
 rateNameId int,
 rateCol varchar(50),
 mill decimal(19,10),
 rate decimal(19,10),
 processFlag int,
 year int 
)
declare @replaceNames table(
 id int,
 oldname nvarchar(50),
 newname nvarchar(50)
)


insert @districtNames 
select postdist,city_c,sum(mil),year,0 
from dbo.mike_taxTXLV() group by postdist,city_c,year


-- import rates
 insert @rates (impLink,district,rateName,rateCol,mill,rate,processFlag,year)
 select 0,b.postdist,b.city_c,b.val1,b.mil,0.0,0,b.year 
 from dbo.mike_taxTXLV() b 

 update a set implink=b.id 
 from @rates a, @districtnames b where a.district = b.district and a.rateName = b.rateName and a.year = b.year

 update @districtNames set flag = 1 

declare
 @colToken varchar(50),
 @distToken varchar(50),
 @rToken varchar(50)

declare @districtUnique table(id int identity(1,1),district varchar(50))
insert @districtUnique 
 select distinct postdist from dbo.mike_taxTXLV() where postdist > ' 0'


while (select COUNT(*) from @districtUnique) > 0
begin
 select top 1 @idToken = id from @districtUnique

 select 
  @distToken = district
 from @districtUnique where id = @idToken

 exec glAccountVerification @distToken,'SCHOOL','CREATE'
-- exec glAccountVerification @rToken,'CITY','CREATE'

 delete @districtUnique where id = @idToken
 
end

delete @rates where mill = 0
update @rates set rate = mill / (select totalMills from @districtNames where id = impLink)

-- prepare for import to object table
update a set a.districtId = b.id from @rates a, Object b where rtrim(a.district) = rtrim(b.Key1) and b.Typ = 4701 and b.a1='SCHOOL'
update a set a.rateNameId = b.id from @rates a, Object b where rtrim(a.rateName) = rtrim(b.Key1) and b.Typ = 4011

-- remove any rates that wont import
delete @rates where ISNULL(districtId,0)=0 
delete @rates where ISNULL(rateNameId,0)=0 

-- turn off the trigger on object
 alter table object disable trigger keySqlObjectWriteToRepoTR

begin transaction
 while exists(select * from @rates)
 begin
  select top 1 
   @idToken = id, @distToken = district, @rToken = rateName, @colToken = rateCol, @millToken = mill, @rateToken = rate, @yearToken = [year]
  from @rates
  if exists(select * from Object where typ = 4012 and Key1 = @distToken and Key2 = @rToken and Key3 = @yearToken and A1 = @colToken)  
   update Object set A2 = @millToken, A3 = @rateToken where typ = 4012 and Key1 = @distToken and Key2 = @rToken and Key3 = cast(@yearToken as varchar(5)) and A1 = @colToken
  else
   insert object (typ,key1,link1,key2,link2,key3,a1,a2,a3)
   select 4012,district,districtId,rateName,rateNameId,cast(@yearToken as varchar(5)),rateCol,cast(mill as varchar(50)),cast(rate as varchar(50)) from @rates where id = @idToken
  
  delete @rates where id = @idToken
 
 end
commit transaction

-- turn the trigger back on object
 alter table object enable trigger keySqlObjectWriteToRepoTR

end

