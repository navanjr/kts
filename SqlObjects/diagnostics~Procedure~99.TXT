create procedure dbo.diagnostics(
 @method varchar(50) = 'all',
 @verbose varchar(5) = 'TRUE'
) as 
begin

 declare @results table(
  id int identity(1,1),
  method varchar(50),
  code int,
  message varchar(max),
  tally int,
  fixProc varchar(100)
 ) 

 declare 
  @methodUnit varchar(50),
  @code int = 0,
  @message varchar(max) = '',
  @tally int = 0,
  @fixProc varchar(max) = ''

-- Debits equal Credits by slink
 set @methodUnit = 'slinkBalance'
 if @method in ('all', @methodUnit)
 begin

  select 
   @code = case when count(*) > 0 then 1 else 0 end,
   @tally = COUNT(*),  
   @message = 'slinks out of balance'
  from gldetail
  group by slink
  having SUM(amount) !=0

  insert @results
   select @methodUnit, @code, @message, @tally, 'none'  

  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   
 end
 
-- receiptLinks
 set @methodUnit = 'receiptLinks'
 if @method in ('all', @methodUnit)
 begin

  exec dbo.diagFix_orphanedReceiptLinks
    @code = @code output,
    @tally = @tally output,
    @message = @message output,
    @fixProc = @fixProc output

  insert @results
   select @methodUnit, @code, @message, @tally, @fixProc  
 
  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   

  select 
   @code = case when count(*) > 0 then 1 else 0 end,
   @tally = COUNT(*),  
   @message = 'Tax receipts with out receiptLinks'
  from Object
  where typ = 4502 and key3 = 'TAX' and A17 = 'Posted'
   and ID not in (select receiptId from receiptlink)

  -- insert into results
  insert @results
   select @methodUnit, @code, @message, @tally ,'none' 
 
  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   

 end

-- receiptLinks
 set @methodUnit = 'journalLinks'
 if @method in ('all', @methodUnit)
 begin

  exec dbo.diagFix_orphanedJournalLinks
    @code = @code output,
    @tally = @tally output,
    @message = @message output,
    @fixProc = @fixProc output

  insert @results
   select @methodUnit, @code, @message, @tally, @fixProc  
 
  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   

 end


-- posted receipts with wrong status
 set @methodUnit = 'receiptWrongStatus'
 if @method in ('all', @methodUnit)
 begin

  select
   @code = case when count(*) > 0 then 1 else 0 end,
   @tally = count(*),
   @message = 'posted receipts with wrong status'
  from object where typ = 4502 and a17 != 'Posted' and 'o' + cast(id as varchar) in (select slink from gldetail)

  insert @results
   select @methodUnit, @code, @message, @tally, 'exec dbo.diagFix_receiptWrongStatus'  

  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   
 end


-- tax receipt numbers
 set @methodUnit = 'taxReceiptNumbers'
 if @method in ('all', @methodUnit)
 begin
 
  exec dbo.diagFix_taxReceiptNumbers
    @code = @code output,
    @tally = @tally output,
    @message = @message output

  insert @results
   select @methodUnit, @code, @message, @tally, 'exec dbo.diagFix_' + @methodUnit + ' @method = ''FIX'''  

  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   

 end

-- tax statement Printed Comments
 set @methodUnit = 'taxStatementPrinted'
 if @method in ('all', @methodUnit)
 begin
 
  exec dbo.diagFix_taxStatementPrinted
    @code = @code output,
    @tally = @tally output,
    @message = @message output

  insert @results
   select @methodUnit, @code, @message, @tally, 'exec dbo.diagFix_' + @methodUnit + ' @method = ''FIX'''  

  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   

 end


-- GLDetail dbo.diagFix_orphanedGLDetail
 set @methodUnit = 'orphanedGLDetail'
 if @method in ('all', @methodUnit)
 begin
 
  exec dbo.diagFix_orphanedGLDetail
    @code = @code output,
    @tally = @tally output,
    @message = @message output

  insert @results
   select @methodUnit, @code, @message, @tally, 'exec dbo.diagFix_' + @methodUnit + ' @method = ''FIX'''  

  exec dbo.logit @@procId, '@method', @methodUnit, '@code', @code, '@message', @message, '@tally', @tally   

 end




-- Next unit test here





 
  if @verbose = 'TRUE'
   select method, tally, message, fixProc from @results where code = 1 order by id
  return

end