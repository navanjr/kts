create proc dbo.settingsCRUD(
 @settingName varchar(200) = null,
 @settingValue varchar(150) = null,
 @settingDescription varchar(500) = null,
 @settingId int = null,
 @method varchar(20) = 'POST',
 @verbose varchar(5) = 'FALSE',
 @logit varchar(5) = 'FALSE',
 @parentId varchar(50) = '',
 @valueOut varchar(max) = null output
) as
begin
 set nocount on

-- setup default settings Here
 if @method = 'INITIALIZE'
 begin
  exec dbo.logit @@procid, 'Initializing Settings...'
  declare @defaultSettings table(
   name varchar(50),
   value varchar(50),
   description varchar(500),
   parentId varchar(15)
  )

  declare @siteId int
  select top 1 @siteId = id from object where typ = 40 order by id

  insert @defaultSettings 
  select 'site.voucherPostDateEqualsVoucherDate', 'FALSE', 'Default the Vouchers postdate to the VoucherDate', 'o' + cast(@siteId as varchar)
  union
  select 'site.pbStuffer', 'FALSE', 'Use ownerNumber for sorting of tax Statements. PitneyBowes', 'o' + cast(@siteId as varchar)
  union
  select 'site.dailyDataPendingDepositsShowBankAccounts', 'FALSE',
   'Group the pending deposits on the bookkeepers dashboard by Bank Account', 'o' + cast(@siteId as varchar)
  union
  select 'site.checkStyleWarrants', 'FALSE', 'Warrants clear automatically when paid', 'o' + cast(@siteId as varchar)
  union 
  select 'site.collectionsAttachFeesNewest', 'FALSE', 'Fees are attached by default to the Newest Tax Item', 'o' + cast(@siteId as varchar)
  union
  select 'site.collectionsUseAllAddressess', 'FALSE', 'Default collections to use all addressses', 'o' + cast(@siteId as varchar)
  union
  select 'site.glDetailSync', 'FALSE', 'Use Object Trigger to sync changes to glDetail', 'o' + cast(@siteId as varchar)
  union
  select 'site.advancedSearchDefaultsOff', 'TRUE', 'the advanced search featue will default to the unchecked position when tax inquiry loads', 'o' + cast(@siteId as varchar)
  union
  select 'site.voidOnlyOnPostDate', 'TRUE', 'only allow Void on the same day of posting', 'o' + cast(@siteId as varchar)
  union
  select 'site.displayPaymentNumber', 'TRUE', 'display Payment Number after Buying a warant', 'o' + cast(@siteId as varchar)
  union
  select 'site.offerDecalOnReceipt', 'TRUE', 'Offer Mobile Home Decal routines when receitpt applies to MFG Home', 'o' + cast(@siteId as varchar)
  union
  select 'site.offerCheckNumberWhenBuyingWarrants', 'FALSE', 'Offer the next Treasurers Check Number (key3) when buying warrants from the bank statement', 'o' + cast(@siteId as varchar)
  union
  select 'site.largeFontOnBrw', 'FALSE', 'Increase Font Size on Configured Browses', 'o' + cast(@siteId as varchar)
  union
  select 'site.commentsDefaultToPrivate', 'FALSE', 'if True all new comments will default to PRIVATE if no user/group override: (ie @privateComments=1)', 'o' + cast(@siteId as varchar)
  union
  select 'site.trackAppropriationLedger', 'FALSE', 'if True the detail for tracking the appropriation ledger will be created on import of warrants', 'o' + cast(@siteId as varchar)

  update a set a.description = b.description
  from settings a, @defaultSettings b
  where a.settingName = b.name

  if @@rowcount > 0
   exec dbo.logit @@procid, 'updated default settings descriptions... @@rowCount', @@rowcount

  insert settings (settingName,settingValue,description,parentId)
  select * from @defaultSettings where name not in (select settingName from settings where settingName is not null)

  if @@rowcount > 0
   exec dbo.logit @@procid, 'inserted default settings... @@rowCount', @@rowcount

 end

 if @method = 'POST' and @settingValue is not null
 begin
  if exists(select * from settings where settingName = @settingName)
   update settings set settingValue = @settingValue, parentId = case when @parentId>'  0' then @parentId else parentId end where settingName = @settingName
  else
   insert settings (settingName, settingValue, parentId) select @settingName, @settingValue, @parentId

 end

 if @method = 'TOGGLE'
 begin
  if @settingId is not null
   update settings set settingValue = coalesce( nullif(dbo.toggle(settingValue),''), settingValue) where id = @settingId
  else
   update settings set settingValue = coalesce( nullif(dbo.toggle(settingValue),''), settingValue) where settingName = @settingName
 end

 if @method = 'GET'
 begin
  if isnull(@parentId,'') > '  0'
  begin
   set @valueOut = ''
   select @valueOut = @valueOut + '@' + dbo.splitF(settingName,'.',2) + '=' + settingValue + ';' from settings where parentId = @parentId
   if @verbose = 'TRUE'
    select @valueOut as settingValue
  end
  if @settingId is null
  begin
   select @valueOut = settingValue from dbo.settings where settingName = @settingName
   if @verbose = 'TRUE'
    select @valueOut as settingValue
   if @logit = 'TRUE'
    exec dbo.logit @@procid, '@settingName', @settingName, '@settingValue', @valueOut
   return
  end
  else
  begin
   select @valueOut ='@name=' + settingName + ';@value=' + isnull(settingValue,'') + ';@description=' + isnull(description,'') +  ';'  from dbo.settings where id = @settingId
   if @verbose = 'TRUE'
    select @valueOut as settingValue
   return
  end
 end

 if @method = 'DELETE' and @settingId is not null
 begin
  delete settings where id = @settingId
 end

 if @method = 'POSTNAME' and @parentId>'  0'
 begin
  if exists(select * from settings where parentId = @parentId)
   update settings set settingName=@settingName+'.'+rtrim(substring(settingName,CHARINDEX('.',settingName)+1,len(settingName))) where parentId = @parentId
 end

 if @method = 'DELETEALL' 
 begin
  if exists(select * from settings where parentId = @parentId)
   delete from settings where parentId = @parentId
 end



end