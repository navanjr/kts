create proc dbo.settingsCRUD(
 @settingName varchar(200) = null,
 @settingValue varchar(150) = null,
 @settingDescription varchar(500) = null,
 @settingId int = null,
 @method varchar(20) = 'POST',
 @verbose varchar(5) = 'FALSE',
 @logit varchar(5) = 'FALSE',
 @parentId varchar(50) = '',
 @valueOut varchar(max) = null output
) as
begin
 set nocount on

-- setup default settings Here
 if @method = 'INITIALIZE'
 begin
  exec dbo.logit @@procid, 'Initializing Settings...'
  declare @defaultSettings table(
   name varchar(50),
   value varchar(50),
   description varchar(500),
   parentId varchar(15),
   removeSettingName varchar(200) default '',
   settingType varchar(50) default ''
  )

  declare @siteId int
  select top 1 @siteId = id from object where typ = 40 order by id

  insert @defaultSettings 
  select 'site.autoLockFiscalCalendar', 'FALSE', 'display the lock status of you fiscal calendar.', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.enhancedSecurity', 'FALSE', 'enable advanced security options.', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.voucherExpireDays', '365', 'Age (in days) that Vouchers are offered for cancellation on the BKD - Zero to disable this feature.', 'o' + cast(@siteId as varchar),'','int'
  union
  select 'site.invoiceRelatedIncludeReceiptHistory', 'TRUE', 'Use receipt history to find related invoices', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.voucherPostDateEqualsVoucherDate', 'FALSE', 'Default the Vouchers postdate to the VoucherDate', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.pbStuffer', 'FALSE', 'Use ownerNumber for sorting of tax Statements. PitneyBowes', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.dailyDataPendingDepositsShowBankAccounts', 'TRUE','Group the pending deposits on the bookkeepers dashboard by Bank Account', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.dailyLedgerDetailBackTax', 'FALSE','Print the detail of the back taxes on the daily ledger', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.checkStyleWarrants', 'TRUE', 'Warrants clear automatically when paid', 'o' + cast(@siteId as varchar),'','boolean'
  union 
  select 'site.collectionsAttachFeesNewestResale', 'FALSE', 'Fees are attached by default to the Newest Tax Item', 'o' + cast(@siteId as varchar),'','boolean'
  union 
  select 'site.collectionsAttachFeesNewestTaxWarrant', 'FALSE', 'Fees are attached by default to the Newest Tax Item', 'o' + cast(@siteId as varchar),'site.collectionsAttachFeesNewest','boolean'
  union
  select 'site.collectionsUseAllAddressess', 'FALSE', 'Default collections to use all addressses', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.glDetailSync', 'TRUE', 'Use Object Trigger to sync changes to glDetail', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.advancedSearchDefaultsOff', 'TRUE', 'the advanced search featue will default to the unchecked position when tax inquiry loads', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.voidOnlyOnPostDate', 'TRUE', 'only allow Void on the same day of posting', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.displayPaymentNumber', 'TRUE', 'display Payment Number after Buying a warant', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.offerDecalOnReceipt', 'TRUE', 'Offer Mobile Home Decal routines when receitpt applies to MFG Home', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.offerCheckNumberWhenBuyingWarrants', 'FALSE', 'Offer the next Treasurers Check Number (key3) when buying warrants from the bank statement', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.largeFontOnBrw', 'FALSE', 'Increase Font Size on Configured Browses', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.commentsDefaultToPrivate', 'FALSE', 'if True all new comments will default to PRIVATE if no user/group override: (ie @privateComments=1)', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.trackAppropriationLedger', 'FALSE', 'if True the detail for tracking the appropriation ledger will be created on import of warrants', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.showPaymentsOnDashboard', 'TRUE', 'Display payment summary and payment date on dashboard', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.collectionsLimitTaxwarrantPub1Year', 'FALSE', 'Limit Personal Publication to current Year Delinquent tax item', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.schoolDistrictTreasurer', 'FALSE', 'This County Treasurer is a treasurer for one or more of the schools', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.dashBoardPostDate', 'TRUE', 'This is enables the dashboard to show prior dates', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.detailCashonDeposit', 'FALSE', 'Detail cash on Bank Deposit like Checks', 'o' + cast(@siteId as varchar),'site.detailCashonOfficialDeposit','boolean'
  union
  select 'site.useFiscalCalendarforCurrentTax', 'TRUE', 'This causes the reports to use teh fiscal calendar rather than the latest tax year to determine which year is labeled current tax', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.onlineSchoolReports', 'FALSE', 'allows sending school report to the treasurer api', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.useCollateralLedger', 'FALSE', 'Causes collateral to be calculated rather than manually entered.', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.feesGetOwnColumn', 'FALSE', 'Causes fees and penalties to show up under their own column on the apportionment report by fund.', 'o' + cast(@siteId as varchar),'','boolean'

  union
  select 'backup.sqlCompression', 'TRUE', 'SQL Compression', 'o' + cast(@siteId as varchar),'site.sqlCompression','boolean'
  union
  select 'backup.CompressKeyLog', 'TRUE', 'Compress Key Log', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'backup.retainBackups', '14', 'Retain Backup #', 'o' + cast(@siteId as varchar),'backup.retainDays','int'
  union
  select 'taxroll.importFile', 'missing', 'File Path', 'o' + cast(@siteId as varchar),'',''
  union
  select 'site.delinquentTaxPubNewest', 'True', 'Only print the newest year on Delinquent Real Estate Publication Notice', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.delinquentTaxPubOption', '3', 'Finanical Options Delinquent Real Estate Publication Notice', 'o' + cast(@siteId as varchar),'','int'
  union
  select 'site.delinquentTaxPublicationNameNewest', 'TRUE', 'Uses the newest address added for the publication', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.officialDepLedgerExcludeINA', 'FALSE', 'excludes inactive official accounts from the official depository ledger', 'o' + cast(@siteId as varchar),'','boolean'

  update a set
   a.description = b.description,
   a.settingType = b.settingType
  from settings a, @defaultSettings b
  where a.settingName = b.name

--remove Unused settings
  delete from settings where settingName in (select removeSettingName from @defaultSettings where removeSettingName>'  0')

  if @@rowcount > 0
   exec dbo.logit @@procid, 'updated default settings descriptions... @@rowCount', @@rowcount

  insert settings (settingName,settingValue,description,parentId,settingType)
  select name,value,description,parentId,settingType from @defaultSettings where name not in (select settingName from settings where settingName is not null)

  if @@rowcount > 0
   exec dbo.logit @@procid, 'inserted default settings... @@rowCount', @@rowcount

 end

 if @method = 'POST' and @settingValue is not null
 begin
  if exists(select * from settings where settingName = @settingName)
   update settings set settingValue = @settingValue, parentId = case when @parentId>'  0' then @parentId else parentId end where settingName = @settingName
  else
   insert settings (settingName, settingValue, parentId) select @settingName, @settingValue, @parentId

 end

 if @method = 'TOGGLE'
 begin
  if @settingId is not null
   update settings set settingValue = coalesce( nullif(dbo.toggle(settingValue),''), settingValue) where id = @settingId
  else
   update settings set settingValue = coalesce( nullif(dbo.toggle(settingValue),''), settingValue) where settingName = @settingName
 end

 if @method = 'GET'
 begin

  if isnull(@parentId,'') > '  0'
  begin
   set @valueOut = ''
   select
    @valueOut = @valueOut + '@' + dbo.splitF(settingName,'.',2) + '=' + settingValue + ';'
     + '@type=' + isnull(settingType,'') + ';'
   from settings
   where parentId = @parentId
   if @verbose = 'TRUE'
    select @valueOut as settingValue
  end

  if @settingId is null
  begin
   select @valueOut = settingValue from dbo.settings where settingName = @settingName
   if @verbose = 'TRUE'
    select @valueOut as settingValue
   if @logit = 'TRUE'
    exec dbo.logit @@procid, '@settingName', @settingName, '@settingValue', @valueOut
   return
  end
  else
  begin
   select
    @valueOut ='@name=' + settingName + ';'
    + '@value=' + isnull(settingValue,'') + ';'
    + '@description=' + isnull(description,'') + ';'
    + '@type=' + isnull(settingType,'') + ';'
   from dbo.settings where id = @settingId
   if @verbose = 'TRUE'
    select @valueOut as settingValue
   return
  end
 end

 if @method = 'DELETE' and @settingId is not null
 begin
  delete settings where id = @settingId
 end

 if @method = 'POSTNAME' and @parentId>'  0'
 begin
  if exists(select * from settings where parentId = @parentId)
   update settings set settingName=@settingName+'.'+rtrim(substring(settingName,CHARINDEX('.',settingName)+1,len(settingName))) where parentId = @parentId
 end

 if @method = 'DELETEALL' 
 begin
  if exists(select * from settings where parentId = @parentId)
   delete from settings where parentId = @parentId
 end



end