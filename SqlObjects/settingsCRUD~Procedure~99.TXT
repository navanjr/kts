create proc dbo.settingsCRUD(
 @settingName varchar(200) = null,
 @settingValue varchar(1000) = null,
 @settingDescription varchar(500) = null,
 @settingId int = null,
 @method varchar(20) = 'POST',
 @verbose varchar(5) = 'FALSE',
 @logit varchar(5) = 'FALSE',
 @parentId varchar(50) = '',
 @valueOut varchar(max) = null output,
 @notes varchar(max) = ''
) as
begin
 set nocount on

-- setup default settings Here
 if @method = 'INITIALIZE'
 begin
  exec dbo.logit @@procid, 'Initializing Settings...'
  declare @defaultSettings table(
   name varchar(200),
   value varchar(1000),
   description varchar(500),
   parentId varchar(15),
   removeSettingName varchar(200) default '',
   settingType varchar(50) default ''
  )

  declare @siteId int
  select top 1 @siteId = id from object where typ = 40 order by id

  insert @defaultSettings 
  select 'site.voucherNumberEnforcementMethod', 'Fiscal', 'Voucher Number Enforcement Method', 'o' + cast(@siteId as varchar),'','Calendar|Fiscal|Unique|None'
   union
  select 'site.IndividualRedemptionFeeMethod', 'Only', 'Add Fees [First]|[No] Interest|[Exclude] Completely|[Only] Interest', 'o' + cast(@siteId as varchar),'','First|No|Exclude|Only'
   union
  select 'site.showCollateralOnBKD', 'FALSE', 'display collateral info on the Book Keepers Dashboard.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.taxRollUseAdvance936Amounts', 'FALSE', 'Use amounts recorded for 936 mobile home payments when importing taxroll.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.SpecialAssessmentRequireInterestDate', 'FALSE', 'Require Interest Date to be entered for Special Assessments.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.AssessmentPenaltySameAsAdvalorem', 'FALSE', 'Calculate assessment penalties teh same way Ad Valorem penalties are calculated.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.passwordExpireDays', '365', 'Age (in days) that passwords expire', 'o' + cast(@siteId as varchar),'','int'
   union
  select 'site.apiDMZTime', '10', 'Minimum time difference (in minutes) the api will enforce before considering a record is stale', 'o' + cast(@siteId as varchar),'','int'
   union
  select 'site.autoLockFiscalCalendar', 'TRUE', 'display the lock status of you fiscal calendar.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.enhancedSecurity', 'FALSE', 'enable advanced security options.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.voucherExpireDays', '365', 'Age (in days) that Vouchers are offered for cancellation on the BKD - Zero to disable this feature.', 'o' + cast(@siteId as varchar),'','int'
   union
  select 'site.invoiceRelatedIncludeReceiptHistory', 'TRUE', 'Use receipt history to find related invoices', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.voucherPostDateEqualsVoucherDate', 'FALSE', 'Default the Vouchers postdate to the VoucherDate', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.pbStuffer', 'FALSE', 'Use ownerNumber for sorting of tax Statements. PitneyBowes', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.dailyDataPendingDepositsShowBankAccounts', 'TRUE','Group the pending deposits on the bookkeepers dashboard by Bank Account', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.dailyLedgerDetailBackTax', 'FALSE','Print the detail of the back taxes on the daily ledger', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.checkStyleWarrants', 'TRUE', 'Warrants clear automatically when paid', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.warrantsHitLedgerWhenRegistered', 'FALSE', 'Warrants affect daily ledger when registered instead of waiting until paid.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.dependentSchoolsGetOwnSection', 'FALSE', 'Dependent Schools will get their own section on the apportionment report by fund.', 'o' + cast(@siteId as varchar),'','boolean'
   union 
  select 'site.collectionsAttachFeesNewestResale', 'FALSE', 'Fees are attached by default to the Newest Tax Item', 'o' + cast(@siteId as varchar),'','boolean'
   union 
  select 'site.collectionsAttachFeesNewestTaxWarrant', 'FALSE', 'Fees are attached by default to the Newest Tax Item', 'o' + cast(@siteId as varchar),'site.collectionsAttachFeesNewest','boolean'
   union
  select 'site.collectionsUseAllAddressess', 'FALSE', 'Default collections to use all addressses', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.glDetailSync', 'TRUE', 'Use Object Trigger to sync changes to glDetail', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.advancedSearchDefaultsOff', 'TRUE', 'the advanced search featue will default to the unchecked position when tax inquiry loads', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.voidOnlyOnPostDate', 'TRUE', 'only allow Void on the same day of posting', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.displayPaymentNumber', 'TRUE', 'display Payment Number after Buying a warant', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.paymentNumberHonorsWarrantFY', 'FALSE', 'Payment Number honors the FY on the warrant for its number', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.offerDecalOnReceipt', 'TRUE', 'Offer Mobile Home Decal routines when receitpt applies to MFG Home', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.offerCheckNumberWhenBuyingWarrants', 'FALSE', 'Offer the next Treasurers Check Number (key3) when buying warrants from the bank statement', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.largeFontOnBrw', 'FALSE', 'Increase Font Size on Configured Browses', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.commentsDefaultToPrivate', 'FALSE', 'if True all new comments will default to PRIVATE if no user/group override: (ie @privateComments=1)', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.trackAppropriationLedger', 'FALSE', 'if True the detail for tracking the appropriation ledger will be created on import of warrants', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.showPaymentsOnDashboard', 'TRUE', 'Display payment summary and payment date on dashboard', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.collectionsLimitTaxwarrantPub1Year', 'FALSE', 'Limit Personal Publication to current Year Delinquent tax item', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.schoolDistrictTreasurer', 'FALSE', 'This County Treasurer is a treasurer for one or more of the schools', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.dashBoardPostDate', 'TRUE', 'This is enables the dashboard to show prior dates', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.detailCashonDeposit', 'FALSE', 'Detail cash on Bank Deposit like Checks', 'o' + cast(@siteId as varchar),'site.detailCashonOfficialDeposit','boolean'
   union
  select 'site.useFiscalCalendarforCurrentTax', 'TRUE', 'This causes the reports to use the fiscal calendar rather than the latest tax year to determine which year is labeled current tax', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.useCollectionsforCurrentTax', 'FALSE', 'This causes the reports to use the current collections rather than the latest tax year to determine which year is labeled current tax', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.onlineSchoolReports', 'FALSE', 'allows sending school report to the treasurer api', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.useCollateralLedger', 'FALSE', 'Causes collateral to be calculated rather than manually entered.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.feesGetOwnColumn', 'FALSE', 'Causes fees and penalties to show up under their own column on both the Apportionment Report by Fund and the Budget Report.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.receiptListUseOwnerName', 'FALSE', 'Causes the recFrom on tax receipts to be replace with the Owner name.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.summaryReceiptsOnDashboard', 'FALSE', 'Show Summary Receipt Button on Dashboard even if Tax system is active.', 'o' + cast(@siteId as varchar),'','boolean'
  union
  select 'site.statementBackTaxLinkName', 'TRUE', 'Link back tax items by name', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'conversion.aamasterpath', 'missing', 'aamaster path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'conversion.appvwork', 'd:\sys\APPVWORK.DBF', 'Servers path to appvwork file', 'o' + cast(@siteId as varchar),'',''
   union
  select 'conversion.appvwork.map', 'K:\APPVWORK.DBF', 'Stations path to KellPro server to place appvwork file', 'o' + cast(@siteId as varchar),'',''
   union
  select 'conversion.appvwork.location', 'F:\ASCII\APPVWORK.DBF', 'Stations path to the original location of appvwork file', 'o' + cast(@siteId as varchar),'','' 
   union
  select 'site.delinquentTaxPubNewest', 'True', 'Only print the newest year on Delinquent Real Estate Publication Notice', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.delinquentTaxPubOption', '3', 'Financial Options Delinquent Real Estate Publication Notice: 1 List all Years 3 Current Year Only 4 Summarize all Amount middle 5 Summarize All Amount Top', 'o' + cast(@siteId as varchar),'','int'
   union
  select 'site.delinquentTaxPublicationNameNewest', 'TRUE', 'Uses the newest address added for the publication', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.officialDepLedgerExcludeINA', 'FALSE', 'excludes inactive official accounts from the official depository ledger', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.officialDepositWarnOutOfSequence', 'TRUE', 'Causes the Official deposit screen to Warn if a deposit is out of sequence', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.LimitPastDueOnSType', 'FALSE', 'Limit past due on S Type to only typ S', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.printBatchbyOwnerNum', 'FALSE', 'Create Print batches by Owner Number', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.printStatementRevised', 'FALSE', 'Adds a "Revised" line to tax statement', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.stateTaxSystemImport', 'FALSE', 'Enable State Tax System Import', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.stateTaxImportDetailBackYears', 'FALSE', 'Detail Back Years in State Tax Import', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.specialAssessmentsGetOwnReceiptNumber', 'FALSE', 'Sets the Special Assessments to get their own sequence of receipt numbers', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.applyGraceOnlyInJanuary', 'FALSE', 'Acts as if the grace period was set to 0 for all months other than January', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.advancePaymentDateWithReceipts', 'TRUE', 'Changes the payment date as well as the receipt dates when an ALL Dates is chosen', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.budgetReportDetailMultipleApportionments', 'FALSE', 'Allows the budget report to give two totals for the months from December to March.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.budgetReportShowJournalEntries', 'TRUE', 'Allows the budget report to show journal entries.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.enableImaging', 'FALSE', 'Turns on the KTS Imaging features.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.warrantRegisterIncludesCancelled', 'FALSE', 'Causes Cancelled Warrants to show on warrant register.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.StateSuperintendent', 'Janet Barresi', 'Name os the State School Superintendent', 'o' + cast(@siteId as varchar),'','string' 
 union
  select 'site.taxYearsExcludePrior', 'FALSE', 'Sets the Tax years to only include Current and Back no Prior.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.TrustGetsOwnRegister', 'FALSE', 'Trust Vouchers get their own series of Register Numbers.', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.taxStatementFooter', '', 'Footer Note on the statement', 'o' + cast(@siteId as varchar),'','text' 
   union
  select 'site.taxStatementMiddle', 'PAYMENT DUE DATES AND PENALTY You must pay 1/2 or all by December 31st Taxes delinquent January 1st and must be paid in full with interest accruing at 1 1/2% per month until paid. Taxes $25.00 or less due in full by December 31st.', 'Middle Note on the statement', 'o' + cast(@siteId as varchar),'','text'
   union
  select 'site.taxStatement2ndMiddle', 'PAYMENT DUE DATES AND PENALTY You must pay all by March 31st. Taxes become delinquent April 1st and must be paid in full with interest accruing at 1 1/2% per month until paid.', '2nd Half Middle Note on the statement', 'o' + cast(@siteId as varchar),'','text'  
   union
  select 'site.taxStatementBarcode', 'TRUE', 'Middle Note on the statement', 'o' + cast(@siteId as varchar),'','boolean' 
   union
  select 'site.taxStatementPayableTo', '', 'Payableto', 'o' + cast(@siteId as varchar),'','text' 
   union
  select 'site.taxStatementBackTax', 'TRUE', 'Show back taxes on statement', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.taxStatementReportForm', '.\reports\TaxStatementDefault.rpt', 'Crystal Report form for statement print', 'o' + cast(@siteId as varchar),'','text'
   union
  select 'site.taxStatementShowTotalTax', 'TRUE', 'Show total taxes on statement', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.taxStatementChangeAddress', 'FALSE', 'Show change of address on statement', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.taxStatementOwnerNumber', 'FALSE', 'Show owner number on statement', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'site.taxStatementPropertyAddress', 'FALSE', 'Display the property address on default statement', 'o' + cast(@siteId as varchar),'','boolean'   
   union
  select 'site.tax_year_searchable', '2014', 'Latest Year to search on the web', 'o' + cast(@siteId as varchar),'','int'
   union
  select 'site.tax_year_payable', '2014', 'Latest Year to allow web payments', 'o' + cast(@siteId as varchar),'','int'
   union
  select 'site.form308ExcludesTaxes', 'FALSE', 'Exclude Ad Valorem Taxes from Form 308 Report', 'o' + cast(@siteId as varchar),'','boolean'   
   union
  select 'site.taxInquiryReturnRows', '1000', 'Number of rows to return in tax inquiry screen.', 'o' + cast(@siteId as varchar),'','int'   
   union
  select 'site.officialPicklistOrderByName', 'FALSE', 'Order the Official Depository Officer picklist by Officer Name rather than Official Account Name.', 'o' + cast(@siteId as varchar),'','boolean'   
   union
  select 'site.includeArchiveOnTaxInquiry', 'FALSE', 'Include AdtaxArchive records when searching paid items in the tax inquiry screen', 'o' + cast(@siteId as varchar),'','boolean'   

---Backup
   union
  select 'backup.aaaEnabled', 'TRUE', 'Enable backup routine', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'backup.dailyBackupTime', '', 'Time of backup', 'o' + cast(@siteId as varchar),'',''
   union
  select 'backup.lastBackupDate', '', 'Date of last backup', 'o' + cast(@siteId as varchar),'',''
   union
  select 'backup.includeDiagnostics', 'TRUE', 'Include diagnostic battery', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'backup.windowsCompression', 'FALSE', 'Windows Compression', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'backup.sqlCompression', 'TRUE', 'SQL Compression', 'o' + cast(@siteId as varchar),'site.sqlCompression','boolean'
   union
  select 'backup.CompressKeyLog', 'TRUE', 'Compress Key Log', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'backup.retainBackups', '14', 'Retain Backup #', 'o' + cast(@siteId as varchar),'backup.retainDays','int'
   union
  select 'backup.noticeEnable', 'TRUE', 'use Notice IRC', 'o' + cast(@siteId as varchar),'','boolean'
   union
  select 'backup.noticeEventLoop', 'TRUE', 'autoStart Event Loop', 'o' + cast(@siteId as varchar),'','boolean'

---taxroll
   union
  select 'taxroll.importFile', 'missing', 'Full import path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.assessorSys', 'State', 'Assessor System', 'o' + cast(@siteId as varchar),'','State|LandMark|Default'
   union
  select 'taxroll.taxLevyFile', 'missing', 'Full levy path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.importTaxLevyFile', 'missing', 'Full levy import path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.importTaxFeeFile', 'missing', 'Full fee file path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.importSpeTaxFile', 'missing', 'Full Special file path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.importMortFile', 'missing', 'Full Mortg file path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.importTaxNoteFile', 'missing', 'Full note file path', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.autoPostCountyCertificates', 'TRUE', 'Auto post county certificates from prior years', 'o' + cast(@siteId as varchar),'',''
   union
  select 'taxroll.ignoreAsessorMtgCodes', 'TRUE', 'Ignore Assessor Mtg Code', 'o' + cast(@siteId as varchar),'','boolean'


---check  Assessor
   union
  select 'checkassessor.sourceFile', 'missing', 'file name', 'o' + cast(@siteId as varchar),'',''
   union
  select 'checkassessor.sourcepath', 'missing', 'file path', 'o' + cast(@siteId as varchar),'',''

  update a set
   a.description = b.description,
   a.settingType = b.settingType,
   a.notes = 'Updating Default Information'
  from settings a, @defaultSettings b
  where a.settingName = b.name
   and (a.description <> b.description
   or a.settingType <> b.settingType)

--remove Unused settings
  --Log settiing Values
  insert settingsHistory   
   select * from settings where settingName in (select removeSettingName from @defaultSettings where removeSettingName>'  0')

  delete from settings where settingName in (select removeSettingName from @defaultSettings where removeSettingName>'  0')

  if @@rowcount > 0
   exec dbo.logit @@procid, 'updated default settings descriptions... @@rowCount', @@rowcount

  insert settings (settingName,settingValue,description,parentId,settingType,notes)
  select name,value,description,parentId,settingType,@notes from @defaultSettings where name not in (select settingName from settings where settingName is not null)

  if @@rowcount > 0
   exec dbo.logit @@procid, 'inserted default settings... @@rowCount', @@rowcount

 end

 if @method = 'POST' and @settingValue is not null
 begin
  if exists(select * from settings where settingName = @settingName)
   begin
   update settings set settingValue = @settingValue, 
     parentId = case when @parentId>'  0' then @parentId else parentId end,
     notes = @notes 
    where settingName = @settingName
   end
  else
   begin
    insert settings (settingName, settingValue, parentId, notes) select @settingName, @settingValue, @parentId,@notes
   end
 end

 if @method = 'TOGGLE'
 begin
  if @settingId is not null
   begin
     update settings set settingValue = coalesce( nullif(dbo.toggle(settingValue),''), settingValue),
      notes = @notes 
      where id = @settingId
   end
  else
   begin
   update settings set settingValue = coalesce( nullif(dbo.toggle(settingValue),''), settingValue),
    notes = @notes 
    where settingName = @settingName
  end
 end

 if @method = 'GET'
 begin

  if isnull(@parentId,'') > '  0'
  begin
   set @valueOut = ''
   select
    @valueOut = @valueOut + '@' + dbo.splitF(settingName,'.',2) + '=' + settingValue + ';'
     + '@type=' + isnull(settingType,'') + ';'
   from settings
   where parentId = @parentId
   if @verbose = 'TRUE'
    select @valueOut as settingValue
  end

  if @settingId is null
  begin
   select @valueOut = settingValue from dbo.settings where settingName = @settingName
   if @verbose = 'TRUE'
    select @valueOut as settingValue
   if @logit = 'TRUE'
    exec dbo.logit @@procid, '@settingName', @settingName, '@settingValue', @valueOut
   return
  end
  else
  begin
   select
    @valueOut ='@name=' + settingName + ';'
    + '@value=' + isnull(settingValue,'') + ';'
    + '@description=' + isnull(description,'') + ';'
    + '@type=' + isnull(settingType,'') + ';'
   from dbo.settings where id = @settingId
   if @verbose = 'TRUE'
    select @valueOut as settingValue
   return
  end
 end

 if @method = 'DELETE' and @settingId is not null
 begin
  --Log settiing Values
  insert settingsHistory   
   select * from settings where id = @settingId
  delete settings where id = @settingId
 end

 if @method = 'POSTNAME' and @parentId>'  0'
 begin
  if exists(select * from settings where parentId = @parentId)
   update settings set settingName=@settingName+'.'+rtrim(substring(settingName,CHARINDEX('.',settingName)+1,len(settingName))),
   notes = @notes where parentId = @parentId
 end

 if @method = 'DELETEALL' 
 begin
  if exists(select * from settings where parentId = @parentId)
    --Log settiing Values
    insert settingsHistory   
     select * from settings where parentId = @parentId

   delete from settings where parentId = @parentId
 end



end
