create proc dbo.apiLegal(
 @taxyear varchar(4) = null,
 @method varchar(50) = 'GET',
 @batchSize int = null,
 @postFile varchar(50) = 'apiPostLegal.json',
 @scratchFile varchar(1000) = null,
 @debugMode varchar(5) = 'FALSE',
 @result varchar(max) = null output,
 @dropRawFile varchar(5) = 'FALSE'
) as
begin
 set nocount on
 SET DEADLOCK_PRIORITY LOW

 declare
  @resource varchar(50) = 'legal',
  @apiService varchar(50),
  @tempPath varchar(50), 
  @postFileFull varchar(100), 
  @apiCode varchar(50),
  @apiwt JSONHierarchy,
  @filter varchar(500),
  @apiResource varchar(50) = '/v2/treasurer/tax_rolls',
  @dump varchar(max),
  @dumpraw varchar(max),
  @log varchar(max),
  @tokenId int,
  @apiResultWt JSONHierarchy,
  @theDate datetime,
  @updated int,
  @inserted int,
  @tally int,
  @goofyChars varchar(100) = '13,10,35,248,129'

 exec dbo.keyAcVars 'acapiservice', @silentMode = 'TRUE', @method='GET', @dump = @apiService output
 exec dbo.logit @@procid, '@method', @method, '@batchSize', @batchSize, '@apiService', @apiService, @override = 'TRUE'

-- if not @apiService = 'ON' 
--  return
 
 select @tempPath = path from dbo.paths() where name = 'temp'
 select top 1 @apiCode = b12 from object where typ = 40 order by id
 set @postFileFull = @tempPath + '\' + @postFile
 if @scratchFile is null
  set @scratchFile = @tempPath + '\' + 'apiResultLegal.tmp'

 declare @jsonPrep table(
  id int identity(1,1),
  parentId int,
  objectId int,
  name varchar(50),
  value varchar(2000),
  type varchar(50)
 )

 declare @wt table(
  parentId int identity(1,1),
  tax_roll_link int,
  taxYear varchar(4),
  owner varchar(50),
  legal_description varchar(max),
  apiDate datetime
 )

 declare @taxyears table(year varchar(4))
 if not @taxyear is null and not @taxyear = 'ALL'
  insert @taxyears select @taxYear
 else
  insert @taxyears select realTaxYear from adtax with (NOLOCK) group by realtaxyear

 if @method = 'JOB'
 begin
  select @batchSize = coalesce(@batchSize, batchSize) from dbo.apiControlBRW() where resource = @resource
  exec dbo.apiLegal @method = 'POST', @batchSize = @batchSize
 end

 if @method = 'POST'
 begin

-- create the post data file then call the API
  insert @wt select top (@batchSize)
   id, 
   REALTAXYEAR,
   OWNERNAME,
   dbo.stripChars(dbo.removeExtraSpacesSF(dbo.taxCorrectionsSF(LEGALDESCRIPTION,id,'102')),@goofyChars),
   apiUpdatedLegal
   from adtax with (NOLOCK) where REALTAXYEAR in (select year from @taxyears) and OWNERNAME>'  0' and id > 0
    and isnull(apiUpdatedLegal,0) < modified and ltrim(dbo.taxCorrectionsSF(LEGALDESCRIPTION,id,'102')) > '  0'
   order by OWNERNAME, ITEMNUMBER  



  if @debugMode = 'TRUE'
  begin
   select * from @wt
   return
  end

-- bail if your done or update batchSize from tally, maybe... 
  select @tally = count(*) from @wt
  if isnull(@tally,0) = 0
  begin
   exec dbo.logit @@procid, 'all records updated... nothing to do. :)', @override = 'TRUE'
   return
  end
 
  if @batchSize != @tally
  begin
   set @batchSize = @tally
   exec dbo.logit @@procid, 'ATTENTION... Changed... @batchSize', @batchSize, @override = 'TRUE'
  end

  insert @jsonPrep select parentId,null,'site_id',@apiCode,'int' from @wt
  insert @jsonPrep select parentId,null,'tax_roll_link',tax_roll_link,'int' from @wt
  insert @jsonPrep select parentId,null,'tax_year',taxyear,'int' from @wt
  insert @jsonPrep select parentId,null,'legal_description', dbo.urlEncode(dbo.encodeBase64(legal_description)),'string' from @wt

-- insert lowest level object wrapper
  select @tokenId = MAX(id) + 1 from @jsonPrep
  insert @jsonPrep (objectId,parentId,name,value,type) 
  select parentId,@tokenId,null,'','object' from @jsonPrep group by parentId
-- insert array wrapper
  insert @jsonPrep (objectId,name,value,type) 
  select @tokenId,'','','array'

  insert @apiwt select * from @jsonPrep
  select @dump = 'site_id='+@apiCode+'&rows='+dbo.URLEncode(dbo.toJSON(@apiwt))
  select @dump = 'site_id='+@apiCode+'&rows='+dbo.toJSON(@apiwt)
  select @dumpraw = 'site_id='+@apiCode+'&rows='+dbo.toJSON(@apiwt)

  exec spOverwriteTextFile @postFileFull, @dump
--  exec spOverwriteTextFile 'c:\client\key\beau.json', @dumpraw
  
  exec dbo.api
   @method = @method,
   @resource = @apiResource,
   @postFile = @postFile,
   @debugMode = @debugMode,
   @scratchFile = @scratchFile,
   @cmdOutput = @tokenId output,
   @dump = @dump output

  set @result = @dump 

  insert @apiResultWt select * from dbo.parseJSON(@dump)
  select @updated = cast(stringValue as int) from @apiResultWt where name = 'updated' and valueType = 'int'
  select @inserted = cast(stringValue as int) from @apiResultWt where name = 'created' and valueType = 'int'
  if isnull(@updated,0) + isnull(@inserted,0) =  @batchSize
  begin
   set @theDate = getDate()
   update adtax set apiUpdatedLegal = @theDate where id in (select tax_roll_link from @wt)
   exec dbo.logit @@procid, 'Success...', @dump, @override = 'TRUE'
  end
  else
  begin
   exec dbo.logit @@procid, 'Failure...', @dump, @override = 'TRUE'
  end

  return
 end

end