create procedure dbo.decisionCheck(
 @slink varchar(16),
 @location varchar(50),
 @method varchar(20) = 'CHECK',
 @level int = 3,
 @requestPerson varchar(300) = '',
 @requestNotes varchar(max) = '',
 @approvedPerson varchar(300) = '',
 @approvedNotes varchar(max) = '',
 @decionId int, = 0,
 @continue varchar(20) = 'FALSE' output,
 @blob varchar(max) = '' output
 )
as
begin
 declare @slinkTyp varchar(1) = dbo.slinkType(@slink),
         @slinkId int = dbo.slinkId(@slink),
         @beforeData varchar(max),
         @requestIni varchar(10) = dbo.dbo.readstring('@ini=', @requestPerson),
         @approvedIni varchar(10) = dbo.dbo.readstring('@ini=', @approvedPerson),
         @idToken int,
         @approvedPersonToken varchar(300),
         @requestPersonToken varchar(300),
         @approvedNotesToken varchar(max),
         @levelToken int
 
 if @method = 'CHECK' 
 begin
  if exists(select * from settings where settingName = 'securitylevel.'+@location)
   begin
    select @level = isnull(cast(settingValue as int),3) from settings where settingName = 'securitylevel.'+@location
   end
  else 
   begin
    insert settings (settingName,settingValue,[description],settingType,notes)
     select 'securitylevel.'+@location, 
      '3', 
      'Secuirty Setting for '+@location+'. Levels are as follows: 1 - No second login required, 2 - Any second login is sufficient, 3 - Login with 81 or greater security level required for either the requester or the approver, 4 - Login with 81 or greater security level required for both the requester and the approver',
      'int',
      'Created by decisionCheck procedure'
     select @level = 3
   end
  
--Set beforeData
   if exists(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'temp_beforeData')
    drop table temp_beforeData

   if @slinktyp = 'o'
   begin
    select * into temp_beforeData from object where ID = @slinkId
    exec dbo.table2json 'temp_beforeData', @json = @beforeData output
   end
    
   if @slinktyp = 't'
   begin
    select * into temp_beforeData from invoices where ID = @slinkId
    exec dbo.table2json 'temp_beforeData', @json = @beforeData output
   end
    
   if @slinktyp = 'l'
   begin
    select * into temp_beforeData from receiptlink where ID = @slinkId
    exec dbo.table2json 'temp_beforeData', @json = @beforeData output
   end
    
   if @slinktyp = 'p'
   begin
    select * into temp_beforeData from paid where ID = @slinkId
    exec dbo.table2json 'temp_beforeData', @json = @beforeData output
   end
    
   if @slinktyp = 'j'
   begin
    select * into temp_beforeData from journalLink where ID = @slinkId
    exec dbo.table2json 'temp_beforeData', @json = @beforeData output
   end
    


--Check for required level
  if @level = 1
  begin
   select @continue = 'TRUE', @blob = '@continue=TRUE;@level=1;@message=Continue, no approval required;'
   select @blob
   insert securityDecision (slink, location, requestDateTime, requestPerson, requestNotes, beforeData, results)
    select @slink, @location, GETDATE(), @requestPerson, @requestNotes, @beforeData, @blob
   return
  end

--Check for existing decision approval
  if exists(select * from securityDecision where slink = @slink and location = @location and requestDateTime >= GETDATE()-1      and dbo.dbo.readstring('@ini=',requestPerson) = @requestIni)
  begin
   select @idToken = id,
         @approvedPersonToken = approvedPerson,
         @approvedIni = dbo.readstring('@ini=', approvedPerson),
         @approvedNotesToken = approvedNotes,
         @levelToken = level
   from securityDecision 
   where slink = @slink 
     and location = @location 
     and requestDateTime >= GETDATE()-1      
     and dbo.dbo.readstring('@ini=',requestPerson) = @requestIni

   if isnull(@approvedPersonToken,'') <' 0'
   begin
    select @continue = 'FALSE', 
           @blob = '@continue=FALSE;@level='+cast(@levelToken as varchar)+';@message=Waiting for Approval;'
    select @blob
    return
   end
   else
   begin
    select @continue = 'TRUE', 
           @blob = '@continue=TRUE;@level='+cast(@levelToken as varchar)+';@message=Approved by '+@approvedIni+';'
    select @blob
    return
   end
  end
  else
  begin
   if @level < 4 or @requestIni in (select ini from users where securitylevel > 80)
   begin
    select @continue = 'FALSE', 
      @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=Entered request for approval;'
    select @blob
    insert securityDecision (slink, location, requestDateTime, requestPerson, requestNotes, beforeData, results)
     select @slink, @location, GETDATE(), @requestPerson, @requestNotes, @beforeData, @blob
    return
   end
   if @level > 3 and @requestIni not in (select ini from users where securitylevel > 80)
   begin
    select @continue = 'FALSE', 
      @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=You do not have sufficient rights to make this request;'
    select @blob
    insert securityDecision (slink, location, requestDateTime, requestPerson, requestNotes, beforeData, results)
     select @slink, @location, GETDATE(), @requestPerson, @requestNotes, @beforeData, @blob
    return
   end
  end
 end

 if @method = 'APPROVE' and @approvedPerson > ' 0'
 begin
  if isnull(@decionId,0) = 0
  begin
   select @decionId = id from securityDecision 
     where slink = @slink 
       and location = @location 
       and isnull(approvedPerson,'') > '0'
       and requestDateTime >= GETDATE()-1 
  end

  if isnull(@decionId,0) = 0
  begin
    select @continue = 'FALSE', 
           @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=Nothing to approve;'
    select @blob
    return
  end
  
  select @idToken = id,
        @requestPersonToken = requestPerson,
        @requestIni = dbo.readstring('@ini=', requestPerson),
        @levelToken = level
  from securityDecision 
  where id = @decionId
  
  if @requestIni = @approvedIni
  begin
    select @continue = 'FALSE', 
           @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=You may not approve your own decisions;'
    select @blob
    return
  end

  if @levelToken < 3    
  begin
    select @continue = 'TRUE', 
           @blob = '@continue=TRUE;@level='+cast(@level as varchar)+';@message=Approved Request;'
    select @blob
    return
  end
 end

  
end

