create procedure dbo.decisionCheck(
 @slink varchar(16)='',
 @location varchar(50)='',
 @method varchar(20) = 'CHECK',
 @level int = 3,
 @requestPerson varchar(300) = '',
 @requestNotes varchar(max) = '',
 @approvedPerson varchar(300) = '',
 @approvedNotes varchar(max) = '',
 @decisionId int = 0,
 @continue varchar(20) = 'FALSE' output,
 @blob varchar(max) = '' output
 )
as
begin
 declare @slinkTyp varchar(1) = dbo.slinkType(@slink),
         @slinkId int = dbo.slinkId(@slink),
         @beforeData varchar(max),
         @requestIni varchar(10) = dbo.readstring('@ini=', @requestPerson),
         @approvedIni varchar(10) = dbo.readstring('@ini=', @approvedPerson),
         @idToken int,
         @approvedPersonToken varchar(300),
         @requestPersonToken varchar(300),
         @approvedNotesToken varchar(max),
         @levelToken int,
         @requestPersonSecurity int,
         @approvedPersonSecurity int
 
 if @method = 'VIEWID'
 begin
  select @slink = slink,
        @slinkTyp = dbo.slinkType(slink),
        @slinkId = dbo.slinkId(slink)
  from securityDecision 
  where id = @decisionId
  
  exec dbo.logit @@procid, '@slinkTyp', @slinktyp
  exec dbo.logit @@procid, '@slinkId', @slinkId
  if @slinkTyp = 'o'
   select '@view=' + cast(@slinkId as varchar) + ';'
  else
   begin
    if @slinkTyp = 't'
     select '@taxInquiry=' + cast(item as varchar) + ';@year=' + cast(taxyear as varchar) + ';'
      from invoices
      where id = @slinkId
    else
     begin
      select ''
     end
   end

  return
 end

 if @method = 'CHECK' 
 begin
  if exists(select * from settings where settingName = 'securitylevel.'+@location)
   begin
    select @level = isnull(cast(settingValue as int),3) from settings where settingName = 'securitylevel.'+@location
   end
  else 
   begin
    insert settings (settingName,settingValue,[description],settingType,notes)
     select 'securitylevel.'+@location, 
      '3', 
      'Security Setting for '+@location+'. Levels are as follows: 1 - No second login required, 2 - Any second login is sufficient, 3 - Login with 81 or greater security level required for either the requester or the approver, 4 - Login with 81 or greater security level required for both the requester and the approver',
      'int',
      'Created by decisionCheck procedure'
     select @level = 3
   end
  
--Set beforeData

   if @slinktyp = 'o'
   begin
    if OBJECT_ID('tempdb..#obeforeData') is not null
     drop table #obeforeData
    select * into #obeforeData from object where ID = @slinkId
    exec dbo.table2json '#obeforeData', @json = @beforeData output
   end
    
   if @slinktyp = 't'
   begin
    if OBJECT_ID('tempdb..#tbeforeData') is not null
     drop table #tbeforeData
    select * into #tbeforeData from invoices where ID = @slinkId
    exec dbo.table2json '#tbeforeData', @json = @beforeData output
   end
    
   if @slinktyp = 'l'
   begin
    if OBJECT_ID('tempdb..#lbeforeData') is not null
     drop table #lbeforeData
    select * into #lbeforeData from receiptlink where ID = @slinkId
    exec dbo.table2json '#lbeforeData', @json = @beforeData output
   end
    
   if @slinktyp = 'p'
   begin
    if OBJECT_ID('tempdb..#pbeforeData') is not null
     drop table #pbeforeData
    select * into #pbeforeData from paid where ID = @slinkId
    exec dbo.table2json '#pbeforeData', @json = @beforeData output
   end
    
   if @slinktyp = 'j'
   begin
    if OBJECT_ID('tempdb..#jbeforeData') is not null
     drop table #jbeforeData
    select * into #jbeforeData from journalLink where ID = @slinkId
    exec dbo.table2json '#jbeforeData', @json = @beforeData output
   end
    
  exec dbo.logit @@procid, '@slinkTyp', @slinktyp
  exec dbo.logit @@procid, '@slinkId', @slinkId
  exec dbo.logit @@procid, '@beforeData', @beforeData



--Check for required level
  if @level = 1
  begin
   select @continue = 'TRUE', @blob = '@continue=TRUE;@level=1;@message=Continue, no approval required;'
   select @blob
   insert securityDecision (slink, location, requestDateTime, requestPerson, requestNotes, beforeData, results, level)
    select @slink, @location, GETDATE(), @requestPerson, @requestNotes, @beforeData, @blob, @level
   return
  end

--Check for existing decision approval
  if exists(select * from securityDecision where slink = @slink and location = @location and requestDateTime >= GETDATE()-1      and dbo.readstring('@ini=',requestPerson) = @requestIni)
  begin
   select @idToken = id,
         @approvedPersonToken = approvedPerson,
         @approvedIni = dbo.readstring('@ini=', approvedPerson),
         @approvedNotesToken = approvedNotes,
         @levelToken = level
   from securityDecision 
   where slink = @slink 
     and location = @location 
     and requestDateTime >= GETDATE()-1      
     and dbo.readstring('@ini=',requestPerson) = @requestIni

   if isnull(@approvedPersonToken,'') <' 0'
   begin
    select @continue = 'FALSE', 
           @blob = '@continue=FALSE;@level='+cast(@levelToken as varchar)+';@message=Waiting for Approval;'
    select @blob
    return
   end
   else
   begin
    select @continue = 'TRUE', 
           @blob = '@continue=TRUE;@level='+cast(@levelToken as varchar)+';@message=Approved by '+@approvedIni+';'
    select @blob
    return
   end
  end
  else
  begin
   if @level < 4 or @requestIni in (select ini from users where securitylevel > 80)
   begin
    select @continue = 'FALSE', 
      @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=Entered request for approval;'
    select @blob
    insert securityDecision (slink, location, requestDateTime, requestPerson, requestNotes, beforeData, results)
     select @slink, @location, GETDATE(), @requestPerson, @requestNotes, @beforeData, @blob
    return
   end
   if @level > 3 and @requestIni not in (select ini from users where securitylevel > 80)
   begin
    select @continue = 'FALSE', 
      @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=You do not have sufficient rights to make this request;'
    select @blob
    insert securityDecision (slink, location, requestDateTime, requestPerson, requestNotes, beforeData, results)
     select @slink, @location, GETDATE(), @requestPerson, @requestNotes, @beforeData, @blob
    return
   end
  end
 end

 if @method = 'APPROVE' and @approvedPerson > ' 0'
 begin

  if isnull(@decisionId,0) = 0
  begin
   select @decisionId = id from securityDecision 
     where slink = @slink 
       and location = @location 
       and isnull(approvedPerson,'') < '0'
       and requestDateTime >= GETDATE()-1 
  end

  if isnull(@decisionId,0) = 0
  begin
    select @continue = 'FALSE', 
           @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=Nothing to approve;'
    select @blob
    return
  end
  
  select @idToken = id,
        @requestPersonToken = requestPerson,
        @requestIni = dbo.readstring('@ini=', requestPerson),
        @levelToken = level
  from securityDecision 
  where id = @decisionId
  
  if @requestIni = @approvedIni
  begin
    select @continue = 'FALSE', 
           @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=You may not approve your own decisions;'
    select @blob

    update securityDecision set 
     results = @blob
    where id = @decisionId

    return
  end

  select 
    @requestPersonSecurity = securitylevel 
   from users 
   where ini = @requestIni 

  select 
    @approvedPersonSecurity = securitylevel 
   from users 
   where ini = @approvedIni


  if @levelToken < 3    
  begin
    select @continue = 'TRUE', 
           @blob = '@continue=TRUE;@level='+cast(@level as varchar)+';@message=Approved Request;'
    select @blob

    update securityDecision set 
     approvedDateTime = getdate(),
     approvedPerson = @approvedPerson,
     approvedNotes = @approvedNotes,
     results = @blob
    where id = @decisionId

    return
  end

  if @levelToken = 3 and (@requestPersonSecurity > 80 or @approvedPersonSecurity > 80)
  begin
    select @continue = 'TRUE', 
           @blob = '@continue=TRUE;@level='+cast(@level as varchar)+';@message=Approved Request;'
    select @blob

    update securityDecision set 
     approvedDateTime = getdate(),
     approvedPerson = @approvedPerson,
     approvedNotes = @approvedNotes,
     results = @blob
    where id = @decisionId

    return
  end

  if @levelToken = 4 and @requestPersonSecurity > 80 and @approvedPersonSecurity > 80
  begin
    select @continue = 'TRUE', 
           @blob = '@continue=TRUE;@level='+cast(@level as varchar)+';@message=Approved Request;'
    select @blob

    update securityDecision set 
     approvedDateTime = getdate(),
     approvedPerson = @approvedPerson,
     approvedNotes = @approvedNotes,
     results = @blob
    where id = @decisionId

    return
  end

  select @continue = 'FALSE', 
         @blob = '@continue=FALSE;@level='+cast(@level as varchar)+';@message=You do not have security clearance to approve this decision;'
  select @blob

  update securityDecision set 
   results = @blob
  where id = @decisionId

  return

 end

  
end

