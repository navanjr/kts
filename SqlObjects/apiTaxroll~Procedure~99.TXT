create proc dbo.apiTaxroll(
 @taxyear varchar(4) = null,
 @method varchar(50) = 'GET',
 @batchSize int = null,
 @postFile varchar(50) = 'apiPostTaxroll.json',
 @scratchFile varchar(1000) = null,
 @debugMode varchar(5) = 'FALSE',
 @result varchar(max) = null output,
 @dropRawFile varchar(5) = 'FALSE'
) as
begin
 set nocount on


 declare
  @resource varchar(50) = 'taxroll',
  @apiService varchar(50),
  @tempPath varchar(50), 
  @postFileFull varchar(100), 
  @apiCode varchar(50),
  @apiwt JSONHierarchy,
  @filter varchar(500),
  @apiResource varchar(50) = '/v2/treasurer/tax_rolls',
  @dump varchar(max),
  @log varchar(max),
  @tokenId int,
  @apiResultWt JSONHierarchy,
  @theDate datetime,
  @updated int,
  @inserted int,
  @tally int,
  @goofyChars varchar(100) = '13,10,9,167,248,34,39'

 exec dbo.keyAcVars 'acapiservice', @method='GET', @silentMode='TRUE', @dump = @apiService output
 exec dbo.logit @@procid, '@method', @method, '@batchSize', @batchSize, '@apiService', @apiService, @override = 'TRUE'

-- if not @apiService = 'ON' 
--  return
 
 select @tempPath = path from dbo.paths() where name = 'temp'
 select top 1 @apiCode = b12 from object where typ = 40 order by id
 set @postFileFull = @tempPath + '\' + @postFile
 if @scratchFile is null
  set @scratchFile = @tempPath + '\' + 'apiResultTaxroll.tmp'

 declare @jsonPrep table(
  id int identity(1,1),
  parentId int,
  objectId int,
  name varchar(50),
  value varchar(500),
  type varchar(50)
 )

 declare @wt table(
  parentId int identity(1,1),
  tax_roll_link int,
  taxYear varchar(5),
  owner varchar(50),
  acres varchar(50),
  addition varchar(50),
  assessed_exemption money,
  assessed_gross money,
  assessed_improvements money,
  assessed_property money,
  assessed_miscellaneous money,
  assessed_mobile_home money,
  assessed_net money,
  block varchar(50),
  lot varchar(50),
  millage_rate decimal(19,10),
  owner_address1 varchar(50),
  owner_address2 varchar(50),
  owner_city varchar(50),
  owner_postal varchar(50),
  owner_state varchar(50),
  parcel varchar(50),
  property_address1 varchar(100),
  parcel_address2 varchar(50),
  parcel_city varchar(50),
  parcel_postal varchar(50),
  parcel_state varchar(50),
  school_district varchar(50),
  tax_type varchar(50),
  legal_description varchar(1000),
  item_number decimal(10,1),
  mortgage_Code varchar(50),
  physical_street_number varchar(50),
  physical_street varchar(50),
  physical_town varchar(50)
 )

 declare @taxyears table(year varchar(4))
 if not @taxyear is null and not @taxyear = 'ALL'
  insert @taxyears select @taxYear
 else
  insert @taxyears select realTaxYear from adtax group by realtaxyear

 if @method = 'JOB'
 begin
  select @batchSize = coalesce(@batchSize, batchSize) from dbo.apiControlBRW() where resource = @resource
  exec dbo.apiTaxroll @method = 'POST', @batchSize = @batchSize
 end

 if @method = 'STATUS'
 begin
  declare @taxyearToken varchar(4)
  declare @status table(taxyear varchar(4), total int, stale int, percentStale money)

  if not @taxyear = 'ALL'
   insert @status select realTaxYear, count(*), sum(case when isnull(apiUpdated,0) < modified then 1 else 0 end), null
    from adtax where realtaxyear in (select year from @taxyears) group by realtaxyear
  else
   insert @status select 'ALL', count(*), sum(case when isnull(apiUpdated,0) < modified then 1 else 0 end), null
    from adtax where realtaxyear in (select year from @taxyears)

  while exists(select * from @taxyears)
  begin
   select top 1 @taxYearToken = year from @taxyears order by year
   update @status set percentStale = (cast(stale as money)/cast(total as money)) * 100.0
   select @log = '@taxyear=' + taxyear + ';' 
    + '@total=' + cast(total as varchar) + ';'
    + '@stale=' + cast(stale as varchar) + ';'
    + '@%stale=' + cast(percentStale as varchar) + '%;'
   from @status where taxyear = @taxyearToken
   exec dbo.logit @@procid, @log, @override = 'TRUE'
   delete @taxyears where year = @taxyearToken
  end
  return
 end

 
 if @method = 'POST'
 begin

-- create the post data file then call the API
declare @rt table (
 taxrollId int,
 taxYear int,
 ownerName varchar(60),
 acres money,
 additionNumber varchar(20),
 baseExemption varchar(20),
 grossAssessed  varchar(20),
 improvedAssessed  varchar(20),
 landAssessed  varchar(20),
 miscAssessed varchar(20),
 mfgHomeAssessed varchar(20),
 netAssessedValue varchar(20),
 townshipBlock varchar(20),
 rangeLot varchar(20),
 totalTaxRate varchar(20),
 address1 varchar(50),
 address2 varchar(50),
 city varchar(50),
 zip1 varchar(20),
 state varchar(4),
 parcel varchar(30),
 propLoc varchar(50),
 schoolDistMain varchar(50),
 recordType varchar(1),
 itemNumber varchar(50),
 mtgCode varchar(10),
 blob varchar(max),
 physicalstreetnumber varchar(50),
 physicalstreet varchar(50),
 physicaltown varchar(50)
)
insert into @rt
 select top (@batchSize)
   a.ID, 
   REALTAXYEAR,
   OWNERNAME,
   acres,
   additionNumber,
   baseexemption, --assessed_exemption money,
   grossAssessed,
   improvedAssessed, -- assessed improvements
   landAssessed,
   miscAssessed,
   mfgHomeAssessed,
   netAssessedValue,
   townshipBlock,
   rangeLot,
   totalTaxRate,
   rtrim(address1),
   rtrim(address2),
   city,
   zip1,
   state,
   fullPidNumber,
   rtrim(replace(replace(proploc,char(0),''),'   ','')), --parcel_address1 varchar(50),
   schoolDistrictMain,
   recordType,
   itemNumber,
   case when treamort > '  0' then treamort else cast(mortgageCode as varchar) end,
   dbo.getTaxInvoiceBlob(i.ID),
   a.physicalstreetnumber,
   a.physicalstreet,
   a.physicaltown
   from adtax a join invoices i on i.TAXROLLID = a.ID where REALTAXYEAR in (select year from @taxyears) and OWNERNAME>'  0' and a.id > 0
    and isnull(a.apiUpdated,0) < a.modified
   order by OWNERNAME, ITEMNUMBER  
insert into @wt
select
   taxrollId, 
   TAXYEAR,
   dbo.readstring('@Name=',blob),
   coalesce(nullif(dbo.readstring('@acres=',blob),''),'0'),
   
   additionNumber,
   dbo.readstring('@EXEMPTION3=',blob), --assessed_exemption money,
   dbo.readstring('@GROSSASSESSED=',blob),
   dbo.readstring('@IMPROVEDASSESSEDVALUE=',blob), -- assessed improvements
   dbo.readstring('@LANDASSESSEDVALUE=',blob),
   dbo.readstring('@MISCASSESSEDVALUE=',blob),
   dbo.readstring('@MFGHOMEASSESSED=',blob),
   dbo.readstring('@NETASSESSEDVALUE=',blob),
   townshipBlock,
   rangeLot,
   totalTaxRate,
   dbo.readstring('@address1=',blob),
   dbo.readstring('@address2=',blob),
   dbo.readstring('@city=',blob),
   dbo.readstring('@zip1=',blob),
   dbo.readstring('@state=',blob),
   parcel,
   propLoc,
   '',
   '',
   '',
   '',
   dbo.readstring('@ORGSCHOOLDISTRICTMAIN=',blob),
   recordType,
   '',
   itemNumber,
   mtgCode,
   physicalstreetnumber,
   physicalstreet,
   physicaltown
 from @rt

-- bail if your done or update batchSize from tally, maybe... 
  select @tally = count(*) from @wt
  if isnull(@tally,0) = 0
  begin
   exec dbo.logit @@procid, 'all records updated... nothing to do. :)', @override = 'TRUE'
   return
  end
 
  if @batchSize != @tally
  begin
   set @batchSize = @tally
   exec dbo.logit @@procid, 'ATTENTION... Changed... @batchSize', @batchSize, @override = 'TRUE'
  end

  insert @jsonPrep select parentId,null,'site_id',@apiCode,'int' from @wt
  insert @jsonPrep select parentId,null,'tax_roll_link',tax_roll_link,'int' from @wt
  insert @jsonPrep select parentId,null,'tax_year',taxyear,'int' from @wt
  insert @jsonPrep select parentId,null,'owner', dbo.stripChars(owner,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'acres', dbo.stripChars(acres,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'addition', dbo.stripChars(addition,@goofyChars),'string' from @wt
--  assessed_exemption
  insert @jsonPrep select parentId,null,'assessed_gross', assessed_gross,'int' from @wt
  insert @jsonPrep select parentId,null,'assessed_improvements', assessed_improvements,'int' from @wt  
  insert @jsonPrep select parentId,null,'assessed_property', assessed_property,'int' from @wt
  insert @jsonPrep select parentId,null,'assessed_miscellaneous', assessed_miscellaneous,'int' from @wt
  insert @jsonPrep select parentId,null,'assessed_mobile_home', assessed_mobile_home,'int' from @wt
  insert @jsonPrep select parentId,null,'assessed_net', assessed_net,'int' from @wt
  insert @jsonPrep select parentId,null,'block', dbo.stripChars(block,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'lot', dbo.stripChars(lot,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'millage_rate', millage_rate,'int' from @wt

  insert @jsonPrep select parentId,null,'owner_address1', dbo.stripChars(owner_address1,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'owner_address2', dbo.stripChars(owner_address2,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'owner_city', dbo.stripChars(owner_city,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'owner_postal',dbo.stripChars( owner_postal,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'owner_state', dbo.stripChars(owner_state,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'parcel', dbo.stripChars(parcel,@goofyChars),'string' from @wt

  insert @jsonPrep select parentId,null,'property_address1', dbo.stripChars(property_address1,@goofyChars),'string' from @wt
--  parcel_address2,
--  parcel_city,
--  parcel_postal,
--  parcel_state,

  insert @jsonPrep select parentId,null,'school_district', dbo.stripChars(school_district,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'tax_type', dbo.stripChars(tax_type,@goofyChars),'string' from @wt
--  insert @jsonPrep select parentId,null,'legal_description', dbo.stripChars(legal_description,@goofyChars),'string' from @wt
  insert @jsonPrep select parentId,null,'item_number', item_number,'int' from @wt
  insert @jsonPrep select parentId,null,'mortgage_code', mortgage_code,'string' from @wt
  insert @jsonPrep select parentId,null,'physical_street_number', physical_street_number,'string' from @wt
  insert @jsonPrep select parentId,null,'physical_street', physical_street,'string' from @wt
  insert @jsonPrep select parentId,null,'physical_town', physical_town,'string' from @wt

-- insert lowest level object wrapper
  select @tokenId = MAX(id) + 1 from @jsonPrep
  insert @jsonPrep (objectId,parentId,name,value,type) 
  select parentId,@tokenId,null,'','object' from @jsonPrep group by parentId
-- insert array wrapper
  insert @jsonPrep (objectId,name,value,type) 
  select @tokenId,'','','array'

  insert @apiwt select * from @jsonPrep
  select @dump = 'site_id='+@apiCode+'&rows='+dbo.URLEncode(dbo.toJSON(@apiwt))

  exec spOverwriteTextFile @postFileFull, @dump
  
  exec dbo.api
   @method = @method,
   @resource = @apiResource,
   @postFile = @postFile,
   @debugMode = @debugMode,
   @scratchFile = @scratchFile,
   @cmdOutput = @tokenId output,
   @dump = @dump output

  set @result = @dump 

  insert @apiResultWt select * from dbo.parseJSON(@dump)
  select @updated = cast(stringValue as int) from @apiResultWt where name = 'updated' and valueType = 'int'
  select @inserted = cast(stringValue as int) from @apiResultWt where name = 'created' and valueType = 'int'
  if isnull(@updated,0) + isnull(@inserted,0) =  @batchSize
  begin
   set @theDate = getDate()
   update adtax set apiUpdated = @theDate where id in (select tax_roll_link from @wt)
   exec dbo.logit @@procid, 'Success...', @dump, @override = 'TRUE'
  end
  else
  begin
   exec dbo.logit @@procid, 'Failure...', @dump, @override = 'TRUE'
  end

  return
 end
end