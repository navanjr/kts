@noupdate;
@bbgcolor=999B0Dh;
@wbgcolor=999B0Dh;
@lmode=2;

@importTag=do(3,menuprocess=);

@loadwindow=
 gcBat='gitcmd_temp.bat',
 gcBatIni='gitcmdIni_temp.bat',
 gcRepoPath=getini('git','path','','c:\kellpro.ini'),
 gcAppInitials=getini('git','appinitials','','c:\kellpro.ini'),
 if(gcAppInitials<'  0' or gcRepoPath<'  0',missingGitSettings=),
 gcAppPath=kpexepath(),
 gitCreateIni=,
 gcBranchName=getini('gitInfo','BRANCHNAME','unknown',gcAppPath&'\gitInfo.ini'),
 create(150,34,64,3,'',002),
 prop(150,'From','jeff|matt|nate|steve|wade|master'),
 prop(150,'Width',80),
 prop(150,'Height',12),
 prop(150,'Readonly',0),
 prop(150,'Drop',5),
 prop(150,7cfah,16777215),
 create(151,10,64,17,'',),
 prop(151,'Width',300),
 prop(151,'Height',120),
 prop(151,7cfah,16777215),
 prop(151,font,Lucida Console),
 prop(151,fontsize,7),
 create(152,10,64,140,'',),
 prop(152,'Width',300),
 prop(152,'Height',120),
 prop(152,7cfah,16777215),
 prop(152,font,Lucida Console),
 prop(152,fontsize,7),
 create(153,10,2,140,'',),
 prop(153,'Width',59),
 prop(153,'Height',120),
 prop(153,7cfah,16777215),
 prop(153,font,Lucida Console),
 prop(153,fontsize,7),
 create(154,9,6,124,'Create &Tag',);

@acc154=
 iw(',.t000Please Enter the Tag Name...., ,.t097Tag Name., ,.w09850.,,.h097.,,.x0983.,,.y0983.,'),
 break(gcretval<>'OK'),
 lcTagName=obj7:d1,
 gcGitCmd='git tag '&lcTagName,
 gitCommand=,
 gitCreateIni=,
 gitStatus=;

@missingGitSettings=
 m('you are missing required GIT settings in your kellpro.ini||default GIT path: c:\client\key\kts','Houston we have a problem...','exclem.ico','set to defaults|cancel'),
 break(gcretval<>1),
 putini('git','path','c:\client\key\kts','c:\kellpro.ini'),
 putini('git','appinitials','kts','c:\kellpro.ini'),
 close('ok');

@afterloadwindow=
 prop(0,text,'Git Repo: '&upper(gcRepoPath)),
 gitStatus=;

 gitFetchAll=,

@gfwindow=
 gitCreateIni=,
 gitStatus=;


\t001Current Branch; \h002; \f002=gcBranchName;
\t003Git Status; \h004;

\t105E&xport;
@acc105=
 m('please select on of the following EXPORT options...','Export to local repo...',,'&Objects|&Templates|&Users|&Everything|&Cancel'),
 break(gcretval=6),
 if(gcretval=1,sql('exec dbo.keySQLObjectsWriteToRepo null')),
 if(gcretval=2,exportTemplates=),
 if(gcretval=3,dumpUsers=),
 if(gcretval=4,exportEverything=),
 gitCreateIni=,
 gitStatus=;

@exportEverything=
 kpmo('Exporting SqlObjects','Export Everything...'),
 sql('exec dbo.keySQLObjectsWriteToRepo null'),
 kpmm('Exporting Templates'),
 sql('exec dbo.keyTemplateWriteToRepo null'),
 kpmm('Exporting Users'),
 dumpUsers=
 kpmc();

@exportTemplates=
 lcid=kp('select id from object where typ=455'),
 if(lcid+0>0,change(lcid,,1),neww(455)),
 gitCreateIni=,
 gitStatus=;

\t108Import;
@acc108=
 m('please select on of the following IMPORT options...','Import from local repo...',,'&One Template|&Everything|&Tag|&Cancel'),
 break(gcretval=4),
 if(gcretval=1,import1Template=),
 if(gcretval=2,importEverything=),
 if(gcretval=3,importTag=), 
 gitCreateIni=,
 gitStatus=;

@importEverything=
 templateImport=,
 userImport=,
 importObjects=;

\t110Git Reset;
@acc110=
 gcGitCmd='git reset --hard HEAD',
 gitCommand=,
 gitCreateIni=,
 gitStatus=;

\t111&Git Commit;
@acc111=
 iw(',.t000Please Enter the Commit Message...., ,.t097Commit Message., ,.w098300.,,.h097.,,.x0983.,,.y0983.,'),
 break(gcretval<>'OK'),
 lcMessage=obj7:d1,
 gcGitCmd='git add .',
 gitCommand=,
 gcGitCmd='git commit -a -m "key_commit: '&lcMessage&'"',
 gitCommand=,
 gitCreateIni=,
 gitStatus=;

\t112Git &Push;
@acc112=
 m('Choose one of the following:','Git Push Options...','Question.ico','push origin '&obj:key1&'|push github '&obj:key1&'|push both|Cancel'),
 break(gcretval=4),
 if(gcretval=1,pushOrigin=),
 if(gcretval=2,pushGitHub=),
 if(gcretval=3,pushBoth=),
 gitCreateIni=,
 gitStatus=;

@pushBoth=
 kpmo('Pushing to Origin...'),
 pushOrigin=,
 kpmm('Pushing to GitHub...'),
 pushGitHub=,
 kpmc();

@pushOrigin=
 gcGitCmd='git push origin '&obj:key1&' --tags',
 gitCommand=;

@pushGitHub=
 gcGitCmd='git push github '&obj:key1&' --tags',
 gitCommand=;

\t113Git P&ull;
@acc113=
 gcGitCmd='git pull origin '&obj:key1,
 gitCommand=,
 gitCreateIni=,
 gitStatus=;

\t114Backup Data;
@acc114=
 sql('backup database '&kp('database')&' to disk='''&gcAppPath&'\kts.dat'' with retaindays=0,INIT');

\t115CSV Stuff;
@acc115=
 do(454,exportCsv1=);

\t117Reconfigure SQL;
@acc117=do(451,reconfigSqlEnv=);

\t118Create Setup Files;
@acc118=
 gcGitCmd='bcp kts.dbo.template out "'&gcRepoPath&'\Needed\bcpTemplate.txt" -Usa -PAmerica#1 -n -C1252',
 gitCommand=,
 gcGitCmd='bcp kts.dbo.Users out "'&gcRepoPath&'\Needed\bcpUsers.txt" -Usa -PAmerica#1 -n -C1252',
 gitCommand=;

@import1Template=
 iw(',.t000Please Enter a Template Id...., ,.t001Typ.,'),
 break(gcretval<>'OK'),
 lcTemplateId=obj7:key1,
 importtexttemplate(gcRepoPath&'\templates','RTEM:ID='&lcTemplateId),
 gitCreateIni=,
 gitStatus=;

@acc150=
 break(obj:key1<'  0'),
 gitFetchAll=,
 gcGitCmd='git checkout '&obj:key1,
 gitCommand=,
 gitCreateIni=,
 gitStatus=;

@templateImport=
 sql('exec dbo.logit @@procid, '''&gcRepoPath&'\templates''','RTEM:ID>0'),
 importtexttemplate(gcRepoPath&'\templates','RTEM:ID>0');

@userImport=
 lcpath=gcAppPath,
 lcpath1=gcRepoPath,
 delfile(lcpath&'\kts.usr'),
 filecopy(lcpath1&'\kts.usr',lcpath&'\kts.usr'),
 sql('exec dbo.logit @@procid, ''key importusers'', ''kts.usr'''),
 importusers('kts.usr');

@dumpUsers=
 lcpath=gcAppPath,
 lcpath1=gcRepoPath,
 delfile(lcpath&'\kts.usr'),
 exportusers('kts.usr'),
 filecopy(lcpath&'\kts.usr',lcpath1&'\kts.usr');

@importObjects=
 setpath(gcRepoPath&'\sqlObjects'),
 sql('exec dbo.logit @@procid, ''import sql objects'','''&gcRepoPath&'\sqlObjects'''),
 dirObjectCheck=;

@importObjectsA=
 sqlloop('select name,path from dbo.dirRead('''&kp('path')&''') where name is not null',importObjects1=),
 do(451,bbproc5=),
 setpath(gcAppPath);

@importObjects1=
 gcFile=obj5:a1,
 importObjects2=;

@importObjects2=
 lcWrk=gcFile,
 lcName=sub(lcWrk,1,instring('~',lcWrk,1,1)-1),
 lcWrk=sub(lcWrk,len(lcName)+2,len(lcWrk)-(len(lcName))),
 lcType=sub(lcWrk,1,instring('~',lcWrk,1,1)-1),
 lcOrder=sub(lcWrk,len(lcType)+2,len(lcWrk)-(len(lcType))),
 readdos(gcFile&'.txt'),
 lcObjectId=kp('select id from object where typ=451 and key1='''&lcName&''''),
 if(lcObjectId+0>0,updateIt=,insertIt=);

@updateIt=
 modify(lcObjectId,004=lcType,006=lcOrder,102=workmemo);
@insertIt=
 insert(-02=451,002=lcName,004=lcType,006=lcOrder,102=workmemo);

@dirObjectCheck=
 lcDirId=kp('select id from dbo.sysobjects where id = object_id(N''[dbo].[dirRead]'') and OBJECTPROPERTY(id, N''IsTableFunction'') = 1'),
 if(lcDirId+0=0,createFunction=),
 importObjectsA=;

@createFunction=
 lcFile='EnableAdvancedSQLOptions~Script~1',
 importObjects2=,
 createoneobject=,
 lcFile='dirRead~TableFunction~3',
 importObjects2=,
 createoneobject=;

@createoneobject=
 get(obj1:id),
 gcid=obj7:id,
 gcname=obj7:key1,
 gctype=obj7:key2,
 do(451,createobject=)

@gitFetchAll=
 gcGitCmd='git fetch --all',
 gitCommand=;

@gitStatus=
 readdos('gitStatus.txt'),
 prop(151,text,workmemo),
 readdos('gitLog.txt'),
 prop(152,text,workmemo),
 readdos('gitTags.txt'),
 prop(153,text,workmemo);

@gitCommand=
 send(gcBat,'pushd '&gcRepoPath),
 send(gcBat,'call '&gcGitCmd,1),
 send(gcBat,'popd',1),
 runw(gcBat,,0);

@gitCreateIni=
 send(gcBatIni,'@echo off'),
 send(gcBatIni,'set TERM=msys',1),
 send(gcBatIni,'pushd '&gcRepoPath,1),
 send(gcBatIni,'echo [gitInfo] > ..\gitInfo.ini',1),
 send(gcBatIni,'for /F "tokens=3 delims=/" %%i in (.git/HEAD) do echo BRANCHNAME=%%i >> ..\gitInfo.ini',1),
 send(gcBatIni,'call git tag > ..\gitTags.txt',1),
 send(gcBatIni,'call sed -n -e ":a" -e "$ s/\n/|/gp;N;b a" ..\gitTags.txt > ..\gitTagsLine.txt',1),
 send(gcBatIni,'call git describe --tags > ..\gitStatus.txt',1),
 send(gcBatIni,'call git status >> ..\gitStatus.txt',1),
 send(gcBatIni,'call git log -n20 --date=short > ../gitLog.txt',1),
 send(gcBatIni,'popd',1),
 runw(gcBatIni,,0);